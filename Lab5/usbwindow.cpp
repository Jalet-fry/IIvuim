#include "usbwindow.h"
#include "ui_usbwindow.h"
#include <QDateTime>
#include <QMessageBox>
#include <QHeaderView>
#include <QResizeEvent>
#include <QFileInfo>

USBWindow::USBWindow(QWidget *parent)
    : QWidget(parent)
    , ui(new Ui::USBWindow)
    , monitor(nullptr)
    , jakeAnimationLabel(nullptr)
    , jakeMovie(nullptr)
    , animationTimer(nullptr)
{
    ui->setupUi(this);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    ui->devicesTable->horizontalHeader()->setStretchLastSection(false);
    ui->devicesTable->horizontalHeader()->setSectionResizeMode(0, QHeaderView::ResizeToContents);
    ui->devicesTable->horizontalHeader()->setSectionResizeMode(1, QHeaderView::Stretch);
    ui->devicesTable->horizontalHeader()->setSectionResizeMode(2, QHeaderView::ResizeToContents);
    ui->devicesTable->horizontalHeader()->setSectionResizeMode(3, QHeaderView::ResizeToContents);
    
    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    setStyleSheet(R"(
        QGroupBox {
            font-weight: bold;
            border: 2px solid #3498db;
            border-radius: 5px;
            margin-top: 10px;
            padding-top: 10px;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 10px;
            padding: 0 5px 0 5px;
        }
        QPushButton {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: bold;
        }
        QPushButton:hover {
            background-color: #2980b9;
        }
        QPushButton:pressed {
            background-color: #21618c;
        }
        QPushButton:disabled {
            background-color: #bdc3c7;
        }
        QTableWidget {
            border: 1px solid #bdc3c7;
            border-radius: 3px;
        }
        QTextEdit {
            border: 1px solid #bdc3c7;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }
    )");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞
    monitor = new USBMonitor(this);
    setupConnections();
    setupJakeAnimation();
    monitor->start();
    
    addLogMessage("=== –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ USB-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–ø—É—â–µ–Ω–∞ ===");
    addLogMessage("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:");
    addLogMessage("1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ USB-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–º—ã—à—å, —Ñ–ª–µ—à–∫—É)");
    addLogMessage("2. –°–æ–±—ã—Ç–∏–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤ –∂—É—Ä–Ω–∞–ª–µ");
    addLogMessage("3. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ—á—å'");
    addLogMessage("4. –û—Ç–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏");
    addLogMessage("üé≠ Jake –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è!");
    addLogMessage("");
}

USBWindow::~USBWindow()
{
    if (monitor)
    {
        monitor->stop();
        monitor->wait();
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    if (animationTimer)
    {
        animationTimer->stop();
        delete animationTimer;
    }
    if (jakeMovie)
    {
        jakeMovie->stop();
        delete jakeMovie;
    }
    if (jakeAnimationLabel)
    {
        delete jakeAnimationLabel;
    }
    
    delete ui;
}

void USBWindow::setupConnections()
{
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞
    connect(monitor, &USBMonitor::deviceConnected, 
            this, &USBWindow::onDeviceConnected);
    connect(monitor, &USBMonitor::deviceDisconnected, 
            this, &USBWindow::onDeviceDisconnected);
    connect(monitor, &USBMonitor::deviceEjected, 
            this, &USBWindow::onDeviceEjected);
    connect(monitor, &USBMonitor::ejectFailed, 
            this, &USBWindow::onEjectFailed);
    connect(monitor, &USBMonitor::logMessage, 
            this, &USBWindow::onLogMessage);
}

void USBWindow::updateDevicesTable()
{
    ui->devicesTable->setRowCount(0);
    
    QVector<USBDevice> devices = monitor->getCurrentDevices();
    
    for (int i = 0; i < devices.size(); ++i)
    {
        const USBDevice& device = devices[i];
        
        int row = ui->devicesTable->rowCount();
        ui->devicesTable->insertRow(row);
        
        // –ù–æ–º–µ—Ä
        QTableWidgetItem* numItem = new QTableWidgetItem(QString::number(i + 1));
        numItem->setTextAlignment(Qt::AlignCenter);
        ui->devicesTable->setItem(row, 0, numItem);
        
        // –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        QTableWidgetItem* nameItem = new QTableWidgetItem(device.getName());
        ui->devicesTable->setItem(row, 1, nameItem);
        
        // PID
        QTableWidgetItem* pidItem = new QTableWidgetItem(device.getPID());
        pidItem->setTextAlignment(Qt::AlignCenter);
        ui->devicesTable->setItem(row, 2, pidItem);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º–æ–µ
        QTableWidgetItem* ejectableItem = new QTableWidgetItem(
            device.isEjectable() ? "–î–∞" : "–ù–µ—Ç"
        );
        ejectableItem->setTextAlignment(Qt::AlignCenter);
        if (device.isEjectable())
        {
            ejectableItem->setForeground(QBrush(QColor(46, 204, 113))); // –ó–µ–ª–µ–Ω—ã–π
        }
        else
        {
            ejectableItem->setForeground(QBrush(QColor(231, 76, 60))); // –ö—Ä–∞—Å–Ω—ã–π
        }
        ui->devicesTable->setItem(row, 3, ejectableItem);
    }
    
    ui->statusLabel->setText(QString("–°—Ç–∞—Ç—É—Å: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %1").arg(devices.size()));
}

void USBWindow::addLogMessage(const QString& message)
{
    QString timestamp = QDateTime::currentDateTime().toString("[hh:mm:ss] ");
    ui->logTextEdit->append(timestamp + message);
    
    // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
    QTextCursor cursor = ui->logTextEdit->textCursor();
    cursor.movePosition(QTextCursor::End);
    ui->logTextEdit->setTextCursor(cursor);
}

void USBWindow::on_refreshButton_clicked()
{
    updateDevicesTable();
    addLogMessage("–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–±–Ω–æ–≤–ª–µ–Ω");
}

void USBWindow::on_ejectButton_clicked()
{
    int currentRow = ui->devicesTable->currentRow();
    if (currentRow < 0)
    {
        QMessageBox::warning(this, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è");
        return;
    }
    
    QVector<USBDevice> devices = monitor->getCurrentDevices();
    if (currentRow >= devices.size())
    {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
        return;
    }
    
    const USBDevice& device = devices[currentRow];
    
    if (!device.isEjectable())
    {
        QMessageBox::information(this, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                               QString("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '%1' –Ω–µ–ª—å–∑—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ—á—å.\n"
                                      "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
                                      .arg(device.getName()));
        return;
    }
    
    QMessageBox::StandardButton reply;
    reply = QMessageBox::question(this, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                 QString("–ò–∑–≤–ª–µ—á—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '%1'?")
                                 .arg(device.getName()),
                                 QMessageBox::Yes | QMessageBox::No);
    
    if (reply == QMessageBox::Yes)
    {
        addLogMessage(QString("–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: %1").arg(device.getName()));
        monitor->ejectDevice(currentRow);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        QTimer::singleShot(500, this, &USBWindow::updateDevicesTable);
    }
}

void USBWindow::on_clearLogButton_clicked()
{
    ui->logTextEdit->clear();
    addLogMessage("–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω");
}

void USBWindow::on_backButton_clicked()
{
    close();
}

void USBWindow::on_devicesTable_itemSelectionChanged()
{
    int currentRow = ui->devicesTable->currentRow();
    
    if (currentRow >= 0)
    {
        QVector<USBDevice> devices = monitor->getCurrentDevices();
        if (currentRow < devices.size())
        {
            ui->ejectButton->setEnabled(devices[currentRow].isEjectable());
        }
        else
        {
            ui->ejectButton->setEnabled(false);
        }
    }
    else
    {
        ui->ejectButton->setEnabled(false);
    }
}

void USBWindow::onDeviceConnected(const QString& deviceName, const QString& pid)
{
    addLogMessage(QString("‚úì –ü–û–î–ö–õ–Æ–ß–ï–ù–û: %1 [PID: %2]").arg(deviceName).arg(pid));
    updateDevicesTable();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è Jake –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    showJakeAnimation("Animation/005.gif", 3000);
}

void USBWindow::onDeviceDisconnected(const QString& deviceName, const QString& pid)
{
    addLogMessage(QString("‚úó –û–¢–ö–õ–Æ–ß–ï–ù–û: %1 [PID: %2]").arg(deviceName).arg(pid));
    updateDevicesTable();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ—â–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    showJakeAnimation("Animation/004.gif", 4000);
}

void USBWindow::onDeviceEjected(const QString& deviceName, bool success)
{
    if (success)
    {
        addLogMessage(QString("‚úì –ë–ï–ó–û–ü–ê–°–ù–û –ò–ó–í–õ–ï–ß–ï–ù–û: %1").arg(deviceName));
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ—â–∞–Ω–∏—è Jake –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏
        showJakeAnimation("Animation/004.gif", 4000);
    }
    else
    {
        addLogMessage(QString("‚úó –û–®–ò–ë–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø: %1").arg(deviceName));
    }
}

void USBWindow::onEjectFailed(const QString& deviceName)
{
    addLogMessage(QString("‚ö† –û–¢–ö–ê–ó –í –ò–ó–í–õ–ï–ß–ï–ù–ò–ò: %1").arg(deviceName));
    QMessageBox::warning(this, "–û—Ç–∫–∞–∑ –≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏", 
                       QString("–ù–µ —É–¥–∞–ª–æ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ—á—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '%1'.\n"
                              "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.")
                              .arg(deviceName));
}

void USBWindow::onLogMessage(const QString& message)
{
    addLogMessage(message);
}

void USBWindow::setupJakeAnimation()
{
    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ª–µ–π–±–ª –¥–ª—è Jake (–£–í–ï–õ–ò–ß–ï–ù–ù–´–ô –†–ê–ó–ú–ï–†!)
    jakeAnimationLabel = new QLabel(this);
    jakeAnimationLabel->setFixedSize(400, 320); // –£–≤–µ–ª–∏—á–∏–ª–∏ –≤ 2 —Ä–∞–∑–∞!
    jakeAnimationLabel->setAlignment(Qt::AlignCenter);
    jakeAnimationLabel->setStyleSheet(R"(
        QLabel {
            background: transparent;
            border: none;
        }
    )");
    
    // –†–∞–∑–º–µ—â–∞–µ–º Jake –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É (—Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
    jakeAnimationLabel->move(this->width() - 420, this->height() - 340);
    jakeAnimationLabel->hide(); // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç
    
    // –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    animationTimer = new QTimer(this);
    animationTimer->setSingleShot(true);
    connect(animationTimer, &QTimer::timeout, this, &USBWindow::onAnimationHide);
}

void USBWindow::showJakeAnimation(const QString& gifPath, int duration)
{
    if (!jakeAnimationLabel) return;
    
    addLogMessage(QString("üé¨ –ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∏–º–∞—Ü–∏—é: %1").arg(gifPath));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    jakeAnimationLabel->move(this->width() - 420, this->height() - 340);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if (jakeMovie)
    {
        jakeMovie->stop();
        delete jakeMovie;
        jakeMovie = nullptr;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    jakeMovie = new QMovie(gifPath);
    if (jakeMovie->isValid())
    {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        jakeMovie->setScaledSize(QSize(400, 320));
        
        jakeAnimationLabel->setMovie(jakeMovie);
        jakeAnimationLabel->show();
        jakeAnimationLabel->raise(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        jakeMovie->start();
        
        addLogMessage(QString("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! –ö–∞–¥—Ä–æ–≤: %1").arg(jakeMovie->frameCount()));
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏—è
        animationTimer->start(duration);
    }
    else
    {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        addLogMessage(QString("‚ùå –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %1").arg(gifPath));
        addLogMessage(QString("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å: %1").arg(QFileInfo(gifPath).absoluteFilePath()));
        delete jakeMovie;
        jakeMovie = nullptr;
    }
}

void USBWindow::hideJakeAnimation()
{
    if (!jakeAnimationLabel) return;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    if (jakeMovie)
    {
        jakeMovie->stop();
        delete jakeMovie;
        jakeMovie = nullptr;
    }
    
    jakeAnimationLabel->hide();
    animationTimer->stop();
}

void USBWindow::onAnimationHide()
{
    hideJakeAnimation();
}

void USBWindow::resizeEvent(QResizeEvent *event)
{
    QWidget::resizeEvent(event);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é Jake –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    if (jakeAnimationLabel && jakeAnimationLabel->isVisible())
    {
        jakeAnimationLabel->move(this->width() - 420, this->height() - 340);
    }
}

