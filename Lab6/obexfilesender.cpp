#include "obexfilesender.h"
#include "bluetoothlogger.h"
#include <QFile>
#include <QFileInfo>
#include <QDataStream>

ObexFileSender::ObexFileSender(BluetoothLogger *logger, QObject *parent)
    : QObject(parent)
    , logger(logger)
    , obexSocket(INVALID_SOCKET)
    , connected(false)
    , connectionId(0)
{
}

ObexFileSender::~ObexFileSender()
{
    if (obexSocket != INVALID_SOCKET) {
        closesocket(obexSocket);
        cleanupWinsock();
    }
}

bool ObexFileSender::sendFileViaObex(const QString &filePath, const QString &deviceAddress, const QString &deviceName)
{
    if (!logger) return false;
    
    logger->info("OBEX", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("OBEX", "–û–¢–ü–†–ê–í–ö–ê –§–ê–ô–õ–ê –ù–ê –ö–û–ú–ü–¨–Æ–¢–ï–†");
    logger->info("OBEX", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("OBEX", QString("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %1").arg(deviceName));
    logger->info("OBEX", QString("MAC: %1").arg(deviceAddress));
    logger->info("OBEX", QString("–§–∞–π–ª: %1").arg(filePath));
    logger->info("OBEX", "");
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    bool isComputer = deviceName.contains("COMPIK", Qt::CaseInsensitive) || 
                     deviceName.contains("PC", Qt::CaseInsensitive) ||
                     deviceName.contains("Computer", Qt::CaseInsensitive);
    
    if (isComputer) {
        logger->info("OBEX", "üéØ –û–ë–ù–ê–†–£–ñ–ï–ù –ö–û–ú–ü–¨–Æ–¢–ï–† - –∏—Å–ø–æ–ª—å–∑—É–µ–º RFCOMM");
        logger->info("OBEX", "–ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ OBEX");
        logger->info("OBEX", "");
        return sendFileViaRfcomm(filePath, deviceAddress, deviceName);
    } else {
        logger->info("OBEX", "üì± –û–ë–ù–ê–†–£–ñ–ï–ù–û –ú–û–ë–ò–õ–¨–ù–û–ï –£–°–¢–†–û–ô–°–¢–í–û - –∏—Å–ø–æ–ª—å–∑—É–µ–º OBEX");
        logger->info("OBEX", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π OBEX –ø—Ä–æ—Ç–æ–∫–æ–ª");
        logger->info("OBEX", "");
    }
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
    QFile file(filePath);
    if (!file.open(QIODevice::ReadOnly)) {
        logger->error("OBEX", QString("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: %1").arg(file.errorString()));
        return false;
    }
    
    QFileInfo fileInfo(filePath);
    QByteArray fileData = file.readAll();
    file.close();
    
    logger->info("OBEX", QString("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %1 –±–∞–π—Ç (%2 MB)")
        .arg(fileData.size())
        .arg(fileData.size() / 1024.0 / 1024.0, 0, 'f', 2));
    logger->info("OBEX", "");
    
    emit transferStarted(fileInfo.fileName());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Winsock
    if (!initWinsock()) {
        emit transferFailed("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Winsock");
        return false;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ RFCOMM —Å–æ–∫–µ—Ç–∞
    logger->info("OBEX", "–®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ Bluetooth —Å–æ–∫–µ—Ç–∞");
    obexSocket = socket(AF_BTH, SOCK_STREAM, BTHPROTO_RFCOMM);
    
    if (obexSocket == INVALID_SOCKET) {
        logger->error("OBEX", QString("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç: %1").arg(getLastSocketError()));
        cleanupWinsock();
        emit transferFailed("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç");
        return false;
    }
    
    logger->success("OBEX", "‚úì Bluetooth —Å–æ–∫–µ—Ç —Å–æ–∑–¥–∞–Ω");
    logger->info("OBEX", "");
    
    // –ü–∞—Ä—Å–∏–Ω–≥ MAC –∞–¥—Ä–µ—Å–∞
    logger->info("OBEX", "–®–ê–ì 2: –ü–∞—Ä—Å–∏–Ω–≥ MAC –∞–¥—Ä–µ—Å–∞");
    BLUETOOTH_ADDRESS btAddr;
    if (!parseMacAddress(deviceAddress, btAddr)) {
        logger->error("OBEX", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MAC –∞–¥—Ä–µ—Å–∞");
        closesocket(obexSocket);
        obexSocket = INVALID_SOCKET;
        cleanupWinsock();
        emit transferFailed("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MAC –∞–¥—Ä–µ—Å–∞");
        return false;
    }
    
    logger->success("OBEX", "‚úì MAC –∞–¥—Ä–µ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω");
    logger->info("OBEX", "");
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è OBEX Push (Object Push Profile)
    logger->info("OBEX", "–®–ê–ì 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OBEX Push —Å–µ—Ä–≤–∏—Å—É");
    logger->debug("OBEX", "UUID: 00001105-0000-1000-8000-00805f9b34fb (Object Push)");
    
    SOCKADDR_BTH sockAddrBth;
    ZeroMemory(&sockAddrBth, sizeof(sockAddrBth));
    sockAddrBth.addressFamily = AF_BTH;
    sockAddrBth.btAddr = btAddr.ullLong;
    sockAddrBth.serviceClassId = OBEX_PUSH_SERVICE_UUID;  // Object Push Profile
    sockAddrBth.port = BT_PORT_ANY;
    
    logger->info("OBEX", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É...");
    logger->warning("OBEX", "‚è± –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-15 —Å–µ–∫—É–Ω–¥...");
    
    int connectResult = ::connect(obexSocket, (SOCKADDR*)&sockAddrBth, sizeof(sockAddrBth));
    
    if (connectResult == SOCKET_ERROR) {
        QString error = getLastSocketError();
        logger->error("OBEX", QString("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %1").arg(error));
        closesocket(obexSocket);
        obexSocket = INVALID_SOCKET;
        cleanupWinsock();
        emit transferFailed(QString("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OBEX —Å–µ—Ä–≤–∏—Å—É: %1").arg(error));
        return false;
    }
    
    logger->success("OBEX", "‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ OBEX Push —Å–µ—Ä–≤–∏—Å—É!");
    logger->info("OBEX", "");
    
    // –î–µ–ª–∞–µ–º —Å–æ–∫–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–º
    u_long nonBlocking = 1;
    ioctlsocket(obexSocket, FIONBIO, &nonBlocking);
    logger->debug("OBEX", "‚úì –°–æ–∫–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º");
    logger->info("OBEX", "");
    
    // OBEX CONNECT
    logger->info("OBEX", "–®–ê–ì 4: OBEX CONNECT");
    if (!obexConnect()) {
        closesocket(obexSocket);
        obexSocket = INVALID_SOCKET;
        cleanupWinsock();
        emit transferFailed("–û—à–∏–±–∫–∞ OBEX CONNECT");
        return false;
    }
    
    logger->success("OBEX", "‚úì OBEX —Å–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    logger->info("OBEX", "");
    
    // OBEX PUT
    logger->info("OBEX", "–®–ê–ì 5: OBEX PUT (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞)");
    logger->info("OBEX", QString("–ò–º—è —Ñ–∞–π–ª–∞: %1").arg(fileInfo.fileName()));
    logger->info("OBEX", QString("–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: %1 –±–∞–π—Ç").arg(fileData.size()));
    logger->info("OBEX", "");
    
    if (!obexPut(fileInfo.fileName(), fileData)) {
        obexDisconnect();
        closesocket(obexSocket);
        obexSocket = INVALID_SOCKET;
        cleanupWinsock();
        emit transferFailed("–û—à–∏–±–∫–∞ OBEX PUT");
        return false;
    }
    
    logger->success("OBEX", "‚úì –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ OBEX!");
    logger->info("OBEX", "");
    
    // OBEX DISCONNECT
    logger->info("OBEX", "–®–ê–ì 6: OBEX DISCONNECT");
    obexDisconnect();
    
    logger->success("OBEX", "");
    logger->success("OBEX", "‚úì‚úì‚úì –§–ê–ô–õ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù –ß–ï–†–ï–ó OBEX! ‚úì‚úì‚úì");
    logger->success("OBEX", "");
    logger->info("OBEX", "–ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ—è–≤–∏—Ç—å—Å—è –¥–∏–∞–ª–æ–≥ '–ü—Ä–∏–Ω—è—Ç—å —Ñ–∞–π–ª?'");
    logger->info("OBEX", "");
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    closesocket(obexSocket);
    obexSocket = INVALID_SOCKET;
    cleanupWinsock();
    
    emit transferCompleted(fileInfo.fileName());
    return true;
}

bool ObexFileSender::sendFileViaRfcomm(const QString &filePath, const QString &deviceAddress, const QString &deviceName)
{
    if (!logger) return false;
    
    logger->info("RFCOMM", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("RFCOMM", "–ü–†–Ø–ú–ê–Ø –ü–ï–†–ï–î–ê–ß–ê –ü–ö-–ü–ö –ß–ï–†–ï–ó RFCOMM");
    logger->info("RFCOMM", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("RFCOMM", QString("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %1").arg(deviceName));
    logger->info("RFCOMM", QString("MAC: %1").arg(deviceAddress));
    logger->info("RFCOMM", QString("–§–∞–π–ª: %1").arg(filePath));
    logger->info("RFCOMM", "");
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
    QFile file(filePath);
    if (!file.open(QIODevice::ReadOnly)) {
        logger->error("RFCOMM", QString("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: %1").arg(file.errorString()));
        emit transferFailed("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª");
        return false;
    }
    
    QFileInfo fileInfo(filePath);
    qint64 fileSize = file.size();
    
    logger->info("RFCOMM", QString("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %1 –±–∞–π—Ç (%2 MB)")
        .arg(fileSize)
        .arg(fileSize / 1024.0 / 1024.0, 0, 'f', 2));
    logger->info("RFCOMM", "");
    
    emit transferStarted(fileInfo.fileName());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Winsock
    if (!initWinsock()) {
        emit transferFailed("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Winsock");
        file.close();
        return false;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ Bluetooth —Å–æ–∫–µ—Ç–∞
    logger->info("RFCOMM", "–®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ Bluetooth —Å–æ–∫–µ—Ç–∞");
    SOCKET btSocket = socket(AF_BTH, SOCK_STREAM, BTHPROTO_RFCOMM);
    
    if (btSocket == INVALID_SOCKET) {
        logger->error("RFCOMM", QString("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç: %1").arg(getLastSocketError()));
        cleanupWinsock();
        file.close();
        emit transferFailed("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Bluetooth —Å–æ–∫–µ—Ç");
        return false;
    }
    
    logger->success("RFCOMM", "‚úì Bluetooth —Å–æ–∫–µ—Ç —Å–æ–∑–¥–∞–Ω");
    logger->info("RFCOMM", "");
    
    // –ü–∞—Ä—Å–∏–Ω–≥ MAC –∞–¥—Ä–µ—Å–∞
    logger->info("RFCOMM", "–®–ê–ì 2: –ü–∞—Ä—Å–∏–Ω–≥ MAC –∞–¥—Ä–µ—Å–∞");
    BLUETOOTH_ADDRESS btAddr;
    if (!parseMacAddress(deviceAddress, btAddr)) {
        logger->error("RFCOMM", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MAC –∞–¥—Ä–µ—Å–∞");
        closesocket(btSocket);
        cleanupWinsock();
        file.close();
        emit transferFailed("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MAC –∞–¥—Ä–µ—Å–∞");
        return false;
    }
    
    logger->success("RFCOMM", "‚úì MAC –∞–¥—Ä–µ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω");
    logger->info("RFCOMM", "");
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è RFCOMM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    logger->info("RFCOMM", "–®–ê–ì 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RFCOMM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
    SOCKADDR_BTH remoteAddress;
    ZeroMemory(&remoteAddress, sizeof(remoteAddress));
    remoteAddress.addressFamily = AF_BTH;
    remoteAddress.btAddr = btAddr.ullLong;
    remoteAddress.serviceClassId = RFCOMM_PROTOCOL_UUID;  // RFCOMM –ø—Ä–æ—Ç–æ–∫–æ–ª
    remoteAddress.port = 11;  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è RFCOMM
    
    logger->debug("RFCOMM", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:");
    logger->debug("RFCOMM", QString("  ‚Ä¢ addressFamily: AF_BTH"));
    logger->debug("RFCOMM", QString("  ‚Ä¢ btAddr: 0x%1").arg(btAddr.ullLong, 12, 16, QChar('0')));
    logger->debug("RFCOMM", QString("  ‚Ä¢ serviceClassId: RFCOMM_PROTOCOL_UUID"));
    logger->debug("RFCOMM", QString("  ‚Ä¢ port: 11"));
    logger->info("RFCOMM", "");
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
    logger->info("RFCOMM", "–®–ê–ì 4: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É");
    logger->warning("RFCOMM", "‚è± –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-15 —Å–µ–∫—É–Ω–¥...");
    
    int connectResult = ::connect(btSocket, (SOCKADDR*)&remoteAddress, sizeof(remoteAddress));
    
    if (connectResult == SOCKET_ERROR) {
        QString error = getLastSocketError();
        logger->error("RFCOMM", QString("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %1").arg(error));
        logger->warning("RFCOMM", "–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:");
        logger->warning("RFCOMM", "1. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ä–≤–µ—Ä–∞");
        logger->warning("RFCOMM", "2. RFCOMM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ");
        logger->warning("RFCOMM", "3. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∏–µ–º–∞ —Ñ–∞–π–ª–æ–≤");
        logger->warning("RFCOMM", "4. –ü—Ä–æ–±–ª–µ–º—ã —Å Bluetooth –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏");
        logger->warning("RFCOMM", "");
        logger->info("RFCOMM", "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
        logger->info("RFCOMM", "1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞ –ü–ö –∑–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–µ–º–∞");
        logger->info("RFCOMM", "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∏–¥–∏–º–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö");
        logger->info("RFCOMM", "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Bluetooth –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ");
        
        closesocket(btSocket);
        cleanupWinsock();
        file.close();
        emit transferFailed(QString("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: %1").arg(error));
        return false;
    }
    
    logger->success("RFCOMM", "‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É!");
    logger->info("RFCOMM", "");
    
    // –î–µ–ª–∞–µ–º —Å–æ–∫–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–º
    u_long nonBlocking = 1;
    ioctlsocket(btSocket, FIONBIO, &nonBlocking);
    logger->debug("RFCOMM", "‚úì –°–æ–∫–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º");
    logger->info("RFCOMM", "");
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    logger->info("RFCOMM", "–®–ê–ì 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞");
    logger->info("RFCOMM", QString("–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É: %1").arg(fileInfo.fileName()));
    logger->info("RFCOMM", "");
    
    const int bufferSize = 1024;
    char buffer[bufferSize];
    qint64 totalSent = 0;
    int chunkNumber = 0;
    
    while (!file.atEnd()) {
        qint64 bytesRead = file.read(buffer, bufferSize);
        if (bytesRead <= 0) break;
        
        qint64 bytesSent = 0;
        while (bytesSent < bytesRead) {
            int result = ::send(btSocket, buffer + bytesSent, bytesRead - bytesSent, 0);
            
            if (result == SOCKET_ERROR) {
                int error = WSAGetLastError();
                if (error == WSAEWOULDBLOCK) {
                    // –ë—É—Ñ–µ—Ä –ø–æ–ª–æ–Ω - –∂–¥–µ–º
                    Sleep(10);
                    continue;
                } else {
                    logger->error("RFCOMM", QString("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %1").arg(getLastSocketError()));
                    closesocket(btSocket);
                    cleanupWinsock();
                    file.close();
                    emit transferFailed("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
                    return false;
                }
            }
            
            bytesSent += result;
            totalSent += result;
        }
        
        chunkNumber++;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –±–ª–æ–∫–æ–≤
        if (chunkNumber % 10 == 0) {
            int progress = (totalSent * 100) / fileSize;
            logger->debug("RFCOMM", QString("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %1/%2 –±–∞–π—Ç (%3%)")
                .arg(totalSent).arg(fileSize).arg(progress));
            emit transferProgress(totalSent, fileSize);
        }
    }
    
    file.close();
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏
    logger->info("RFCOMM", "–®–ê–ì 6: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏");
    logger->info("RFCOMM", "‚è± –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
    Sleep(2000);  // 2 —Å–µ–∫—É–Ω–¥—ã
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    closesocket(btSocket);
    cleanupWinsock();
    
    logger->success("RFCOMM", "");
    logger->success("RFCOMM", "‚úì‚úì‚úì –§–ê–ô–õ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù! ‚úì‚úì‚úì");
    logger->success("RFCOMM", QString("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–ª–æ–∫–æ–≤: %1").arg(chunkNumber));
    logger->success("RFCOMM", QString("–í—Å–µ–≥–æ –±–∞–π—Ç: %1").arg(totalSent));
    logger->info("RFCOMM", "");
    logger->info("RFCOMM", "–ù–∞ –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–º –ü–ö –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è —Ñ–∞–π–ª");
    logger->info("RFCOMM", "");
    
    emit transferCompleted(fileInfo.fileName());
    return true;
}

bool ObexFileSender::initWinsock()
{
    WSADATA wsaData;
    int result = WSAStartup(MAKEWORD(2, 2), &wsaData);
    
    if (result != 0) {
        if (logger) {
            logger->error("OBEX", QString("–û—à–∏–±–∫–∞ WSAStartup: %1").arg(result));
        }
        return false;
    }
    
    if (logger) {
        logger->debug("OBEX", "‚úì Winsock –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }
    
    return true;
}

void ObexFileSender::cleanupWinsock()
{
    WSACleanup();
    if (logger) {
        logger->debug("OBEX", "‚úì Winsock –æ—á–∏—â–µ–Ω");
    }
}

bool ObexFileSender::parseMacAddress(const QString &address, BLUETOOTH_ADDRESS &btAddr)
{
    ZeroMemory(&btAddr, sizeof(btAddr));
    
    QStringList bytes = address.split(":");
    if (bytes.size() != 6) {
        return false;
    }
    
    for (int i = 0; i < 6; i++) {
        bool ok;
        btAddr.rgBytes[5 - i] = bytes[i].toUInt(&ok, 16);
        if (!ok) return false;
    }
    
    return true;
}

bool ObexFileSender::obexConnect()
{
    logger->debug("OBEX", "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ OBEX CONNECT –ø–∞–∫–µ—Ç–∞...");
    
    QByteArray packet = buildConnectPacket();
    
    logger->debug("OBEX", QString("–†–∞–∑–º–µ—Ä CONNECT –ø–∞–∫–µ—Ç–∞: %1 –±–∞–π—Ç").arg(packet.size()));
    logger->debug("OBEX", "–û—Ç–ø—Ä–∞–≤–∫–∞ OBEX CONNECT...");
    
    if (!sendObexPacket(packet)) {
        logger->error("OBEX", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ OBEX CONNECT");
        return false;
    }
    
    logger->debug("OBEX", "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...");
    QByteArray response = receiveObexResponse();
    
    if (response.isEmpty() || (unsigned char)response[0] != OBEX_RSP_SUCCESS) {
        if (!response.isEmpty()) {
            logger->error("OBEX", QString("OBEX CONNECT –æ—Ç–∫–ª–æ–Ω–µ–Ω: 0x%1").arg((unsigned char)response[0], 2, 16, QChar('0')));
        } else {
            logger->error("OBEX", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OBEX —Å–µ—Ä–≤–µ—Ä–∞");
        }
        return false;
    }
    
    logger->success("OBEX", "‚úì OBEX CONNECT SUCCESS (0xA0)");
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º Connection ID –µ—Å–ª–∏ –µ—Å—Ç—å
    if (response.size() >= 7) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Connection ID header (0xCB)
        for (int i = 3; i < response.size() - 4; i++) {
            if ((unsigned char)response[i] == OBEX_HDR_CONNECTION) {
                connectionId = ((unsigned char)response[i+1] << 24) |
                              ((unsigned char)response[i+2] << 16) |
                              ((unsigned char)response[i+3] << 8) |
                              ((unsigned char)response[i+4]);
                logger->debug("OBEX", QString("Connection ID: 0x%1").arg(connectionId, 8, 16, QChar('0')));
                break;
            }
        }
    }
    
    connected = true;
    return true;
}

bool ObexFileSender::obexPut(const QString &fileName, const QByteArray &fileData)
{
    logger->debug("OBEX", "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ OBEX PUT –ø–∞–∫–µ—Ç–∞...");
    logger->debug("OBEX", QString("–ò–º—è —Ñ–∞–π–ª–∞: %1").arg(fileName));
    logger->debug("OBEX", QString("–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: %1 –±–∞–π—Ç").arg(fileData.size()));
    
    const int MAX_OBEX_PACKET = 32000;  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä OBEX –ø–∞–∫–µ—Ç–∞ (32 KB)
    
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –º–∞–ª–µ–Ω—å–∫–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
    if (fileData.size() <= MAX_OBEX_PACKET) {
        logger->info("OBEX", "–§–∞–π–ª –º–∞–ª–µ–Ω—å–∫–∏–π - –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–∏–º –ø–∞–∫–µ—Ç–æ–º");
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º PUT FINAL –ø–∞–∫–µ—Ç
        QByteArray packet;
        
        // Opcode: PUT FINAL (0x82)
        packet.append((char)OBEX_PUT_FINAL);
        
        // Packet Length (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ)
        packet.append((char)0x00);
        packet.append((char)0x00);
        
        // Connection ID header (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (connectionId != 0) {
            packet.append((char)OBEX_HDR_CONNECTION);
            writeUInt32BE(packet, connectionId);
        }
        
        // Name header
        QByteArray nameUnicode = encodeUnicode(fileName);
        packet.append((char)OBEX_HDR_NAME);
        writeUInt16BE(packet, nameUnicode.size() + 3);
        packet.append(nameUnicode);
        
        // Length header
        packet.append((char)OBEX_HDR_LENGTH);
        writeUInt32BE(packet, fileData.size());
        
        // End of Body header
        packet.append((char)OBEX_HDR_END_OF_BODY);
        writeUInt16BE(packet, fileData.size() + 3);
        packet.append(fileData);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–ª–∏–Ω—É –ø–∞–∫–µ—Ç–∞
        quint16 totalLength = packet.size();
        packet[1] = (totalLength >> 8) & 0xFF;
        packet[2] = totalLength & 0xFF;
        
        logger->debug("OBEX", QString("–†–∞–∑–º–µ—Ä PUT –ø–∞–∫–µ—Ç–∞: %1 –±–∞–π—Ç").arg(packet.size()));
        logger->info("OBEX", "–û—Ç–ø—Ä–∞–≤–∫–∞ OBEX PUT...");
        logger->info("OBEX", "‚è± –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –¥–∏–∞–ª–æ–≥ '–ü—Ä–∏–Ω—è—Ç—å —Ñ–∞–π–ª?'");
        logger->info("OBEX", "");
        
        if (!sendObexPacket(packet)) {
            logger->error("OBEX", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ OBEX PUT");
            return false;
        }
        
        logger->debug("OBEX", "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞...");
        logger->info("OBEX", "üí° –ï—Å–ª–∏ –≤—ã –ü–†–ò–ù–Ø–õ–ò —Ñ–∞–π–ª –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ - –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞...");
        logger->info("OBEX", "");
        
        QByteArray response = receiveObexResponse();
        
        if (response.isEmpty()) {
            logger->error("OBEX", "");
            logger->error("OBEX", "‚úó –ù–ï–¢ –û–¢–í–ï–¢–ê –û–¢ –¢–ï–õ–ï–§–û–ù–ê");
            logger->error("OBEX", "");
            logger->warning("OBEX", "–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:");
            logger->warning("OBEX", "1. –í—ã –ü–†–ò–ù–Ø–õ–ò —Ñ–∞–π–ª, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ—à–µ–ª (–ø—Ä–æ–±–ª–µ–º–∞ Bluetooth)");
            logger->warning("OBEX", "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω - —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–º!");
            logger->warning("OBEX", "3. –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫ (30 —Å–µ–∫—É–Ω–¥)");
            logger->warning("OBEX", "");
            return false;
        }
        
        unsigned char responseCode = (unsigned char)response[0];
        
        if (responseCode != OBEX_RSP_SUCCESS) {
            logger->error("OBEX", QString("OBEX PUT –æ—Ç–∫–ª–æ–Ω–µ–Ω: 0x%1").arg(responseCode, 2, 16, QChar('0')));
            
            if (responseCode == OBEX_RSP_FORBIDDEN) {
                logger->warning("OBEX", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –û–¢–ö–õ–û–ù–ò–õ —Ñ–∞–π–ª –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ");
            }
            return false;
        }
        
        logger->success("OBEX", "‚úì OBEX PUT SUCCESS (0xA0)");
        logger->success("OBEX", "–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º!");
        
        return true;
    } else {
        // –§–∞–π–ª –±–æ–ª—å—à–æ–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
        logger->info("OBEX", "–§–∞–π–ª –±–æ–ª—å—à–æ–π - –º–Ω–æ–≥–æ–ø–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞");
        logger->info("OBEX", QString("–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: %1").arg((fileData.size() / MAX_OBEX_PACKET) + 1));
        logger->info("OBEX", "");
        
        qint64 offset = 0;
        int packetNum = 0;
        
        while (offset < fileData.size()) {
            qint64 chunkSize = qMin((qint64)MAX_OBEX_PACKET, fileData.size() - offset);
            bool isLast = (offset + chunkSize >= fileData.size());
            
            packetNum++;
            logger->debug("OBEX", QString("–ü–∞–∫–µ—Ç %1: offset=%2, size=%3, last=%4")
                .arg(packetNum).arg(offset).arg(chunkSize).arg(isLast ? "–î–ê" : "–ù–ï–¢"));
            
            QByteArray packet;
            
            // Opcode: PUT –∏–ª–∏ PUT FINAL
            packet.append((char)(isLast ? OBEX_PUT_FINAL : OBEX_PUT));
            packet.append((char)0x00);
            packet.append((char)0x00);
            
            // Connection ID
            if (connectionId != 0) {
                packet.append((char)OBEX_HDR_CONNECTION);
                writeUInt32BE(packet, connectionId);
            }
            
            // –ü–µ—Ä–≤—ã–π –ø–∞–∫–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∏ —Ä–∞–∑–º–µ—Ä
            if (offset == 0) {
                QByteArray nameUnicode = encodeUnicode(fileName);
                packet.append((char)OBEX_HDR_NAME);
                writeUInt16BE(packet, nameUnicode.size() + 3);
                packet.append(nameUnicode);
                
                packet.append((char)OBEX_HDR_LENGTH);
                writeUInt32BE(packet, fileData.size());
            }
            
            // Body –∏–ª–∏ End of Body
            QByteArray chunk = fileData.mid(offset, chunkSize);
            packet.append((char)(isLast ? OBEX_HDR_END_OF_BODY : OBEX_HDR_BODY));
            writeUInt16BE(packet, chunk.size() + 3);
            packet.append(chunk);
            
            // –î–ª–∏–Ω–∞ –ø–∞–∫–µ—Ç–∞
            quint16 totalLength = packet.size();
            packet[1] = (totalLength >> 8) & 0xFF;
            packet[2] = totalLength & 0xFF;
            
            logger->debug("OBEX", QString("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ %1 (%2 –±–∞–π—Ç)...").arg(packetNum).arg(packet.size()));
            
            if (!sendObexPacket(packet)) {
                logger->error("OBEX", QString("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ %1").arg(packetNum));
                return false;
            }
            
            // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            QByteArray response = receiveObexResponse();
            
            if (response.isEmpty()) {
                logger->error("OBEX", QString("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–∞–∫–µ—Ç %1").arg(packetNum));
                return false;
            }
            
            unsigned char responseCode = (unsigned char)response[0];
            
            if (isLast) {
                // –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç - –∂–¥–µ–º SUCCESS
                if (responseCode != OBEX_RSP_SUCCESS) {
                    logger->error("OBEX", QString("OBEX PUT –æ—Ç–∫–ª–æ–Ω–µ–Ω: 0x%1").arg(responseCode, 2, 16, QChar('0')));
                    return false;
                }
                logger->success("OBEX", "‚úì OBEX PUT FINAL SUCCESS!");
            } else {
                // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø–∞–∫–µ—Ç - –∂–¥–µ–º CONTINUE
                if (responseCode != OBEX_RSP_CONTINUE && responseCode != OBEX_RSP_SUCCESS) {
                    logger->error("OBEX", QString("–û—à–∏–±–∫–∞ –Ω–∞ –ø–∞–∫–µ—Ç–µ %1: 0x%2").arg(packetNum).arg(responseCode, 2, 16, QChar('0')));
                    return false;
                }
                logger->debug("OBEX", QString("‚úì –ü–∞–∫–µ—Ç %1 –ø—Ä–∏–Ω—è—Ç (0x%2)").arg(packetNum).arg(responseCode, 2, 16, QChar('0')));
            }
            
            offset += chunkSize;
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å
            emit transferProgress(offset, fileData.size());
        }
        
        logger->success("OBEX", "");
        logger->success("OBEX", "‚úì –í—Å–µ –ø–∞–∫–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
        logger->success("OBEX", "–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º!");
        logger->success("OBEX", "");
        
        return true;
    }
}

bool ObexFileSender::obexDisconnect()
{
    if (!connected) return true;
    
    logger->debug("OBEX", "–û—Ç–ø—Ä–∞–≤–∫–∞ OBEX DISCONNECT...");
    
    QByteArray packet = buildDisconnectPacket();
    
    if (!sendObexPacket(packet)) {
        logger->warning("OBEX", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DISCONNECT (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)");
        return false;
    }
    
    // –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç
    logger->success("OBEX", "‚úì OBEX DISCONNECT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
    
    connected = false;
    return true;
}

bool ObexFileSender::sendObexPacket(const QByteArray &packet)
{
    if (obexSocket == INVALID_SOCKET) {
        return false;
    }
    
    logger->logApiCall("send", QString("OBEX –ø–∞–∫–µ—Ç, —Ä–∞–∑–º–µ—Ä=%1").arg(packet.size()));
    
    int sent = ::send(obexSocket, packet.constData(), packet.size(), 0);
    
    if (sent == SOCKET_ERROR) {
        QString error = getLastSocketError();
        logger->logApiResult("send", QString("FAILED - %1").arg(error), false);
        return false;
    }
    
    logger->logApiResult("send", QString("SUCCESS - %1 –±–∞–π—Ç").arg(sent), true);
    
    return (sent == packet.size());
}

QByteArray ObexFileSender::receiveObexResponse()
{
    if (obexSocket == INVALID_SOCKET) {
        return QByteArray();
    }
    
    // –ñ–¥–µ–º –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    char buffer[1024];
    int totalReceived = 0;
    int attempts = 0;
    const int maxAttempts = 300;  // 30 —Å–µ–∫—É–Ω–¥ (300 * 100ms) - –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    logger->debug("OBEX", "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞...");
    
    while (attempts < maxAttempts) {
        int received = ::recv(obexSocket, buffer + totalReceived, sizeof(buffer) - totalReceived, 0);
        
        if (received == SOCKET_ERROR) {
            int error = WSAGetLastError();
            if (error == WSAEWOULDBLOCK) {
                // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ - –∂–¥–µ–º
                Sleep(100);
                attempts++;
                
                // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                if (attempts % 50 == 0) {
                    logger->debug("OBEX", QString("–û–∂–∏–¥–∞–Ω–∏–µ... (%1 —Å–µ–∫)").arg(attempts / 10));
                }
                continue;
            }
            
            logger->error("OBEX", QString("–û—à–∏–±–∫–∞ recv: %1").arg(error));
            return QByteArray();
        }
        
        if (received > 0) {
            totalReceived += received;
            logger->debug("OBEX", QString("–ü–æ–ª—É—á–µ–Ω–æ %1 –±–∞–π—Ç –æ—Ç–≤–µ—Ç–∞ (–≤—Å–µ–≥–æ: %2)").arg(received).arg(totalReceived));
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (totalReceived >= 1) {
                logger->debug("OBEX", QString("Response Code: 0x%1").arg((unsigned char)buffer[0], 2, 16, QChar('0')));
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç (–º–∏–Ω–∏–º—É–º 3 –±–∞–π—Ç–∞: opcode + length)
            if (totalReceived >= 3) {
                quint16 packetLength = ((unsigned char)buffer[1] << 8) | (unsigned char)buffer[2];
                logger->debug("OBEX", QString("–û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏–Ω–∞ –ø–∞–∫–µ—Ç–∞: %1 –±–∞–π—Ç").arg(packetLength));
                
                if (totalReceived >= packetLength) {
                    logger->success("OBEX", QString("‚úì –ü–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç (%1 –±–∞–π—Ç)").arg(packetLength));
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º response code
                    unsigned char responseCode = (unsigned char)buffer[0];
                    if (responseCode == OBEX_RSP_SUCCESS) {
                        logger->success("OBEX", "‚úì Response: SUCCESS (0xA0)");
                    } else if (responseCode == OBEX_RSP_CONTINUE) {
                        logger->info("OBEX", "‚Üí Response: CONTINUE (0x90)");
                    } else if (responseCode == OBEX_RSP_FORBIDDEN) {
                        logger->warning("OBEX", "‚ö† Response: FORBIDDEN (0xC3) - –§–∞–π–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
                    } else {
                        logger->warning("OBEX", QString("‚ö† Response: 0x%1").arg(responseCode, 2, 16, QChar('0')));
                    }
                    
                    return QByteArray(buffer, packetLength);
                }
            }
        }
    }
    
    logger->warning("OBEX", "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞");
    return QByteArray();
}

QByteArray ObexFileSender::buildConnectPacket()
{
    QByteArray packet;
    
    // Opcode: CONNECT (0x80)
    packet.append((char)OBEX_CONNECT);
    
    // Packet Length (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ)
    packet.append((char)0x00);
    packet.append((char)0x00);
    
    // OBEX Version (1.0)
    packet.append((char)0x10);
    
    // Flags (0x00)
    packet.append((char)0x00);
    
    // Max packet length (0xFFFF = 65535)
    packet.append((char)0xFF);
    packet.append((char)0xFF);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏–Ω—É –ø–∞–∫–µ—Ç–∞
    quint16 totalLength = packet.size();
    packet[1] = (totalLength >> 8) & 0xFF;
    packet[2] = totalLength & 0xFF;
    
    return packet;
}

QByteArray ObexFileSender::buildPutPacket(const QString &fileName, qint64 fileSize, bool final)
{
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è PUT –ø–∞–∫–µ—Ç–∞
    // –ù–æ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –º—ã —Å–¥–µ–ª–∞–ª–∏ –≤ obexPut()
    return QByteArray();
}

QByteArray ObexFileSender::buildDisconnectPacket()
{
    QByteArray packet;
    
    // Opcode: DISCONNECT (0x81)
    packet.append((char)OBEX_DISCONNECT);
    
    // Packet Length
    packet.append((char)0x00);
    packet.append((char)0x03);  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    
    return packet;
}

void ObexFileSender::writeUInt16BE(QByteArray &data, quint16 value)
{
    data.append((value >> 8) & 0xFF);  // High byte
    data.append(value & 0xFF);          // Low byte
}

void ObexFileSender::writeUInt32BE(QByteArray &data, quint32 value)
{
    data.append((value >> 24) & 0xFF);
    data.append((value >> 16) & 0xFF);
    data.append((value >> 8) & 0xFF);
    data.append(value & 0xFF);
}

QByteArray ObexFileSender::encodeUnicode(const QString &str)
{
    QByteArray result;
    
    // OBEX –∏—Å–ø–æ–ª—å–∑—É–µ—Ç UTF-16 Big Endian —Å null terminator
    for (int i = 0; i < str.length(); i++) {
        quint16 ch = str[i].unicode();
        result.append((ch >> 8) & 0xFF);  // High byte
        result.append(ch & 0xFF);          // Low byte
    }
    
    // Null terminator
    result.append((char)0x00);
    result.append((char)0x00);
    
    return result;
}

QString ObexFileSender::getLastSocketError()
{
    int error = WSAGetLastError();
    
    switch (error) {
    case WSAETIMEDOUT:
        return QString("WSAETIMEDOUT (%1): –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è").arg(error);
    case WSAECONNREFUSED:
        return QString("WSAECONNREFUSED (%1): –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ").arg(error);
    case WSAEWOULDBLOCK:
        return QString("WSAEWOULDBLOCK (%1): –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞").arg(error);
    default:
        return QString("WSA Error %1").arg(error);
    }
}

