#include "bluetoothwindow.h"
#include "ui_bluetoothwindow.h"
#include <QMessageBox>
#include <QDateTime>
#include <QDebug>
#include <QFileDialog>
#include <QFileInfo>
#include <QDir>
#include <QTimer>

BluetoothWindow::BluetoothWindow(QWidget *parent)
    : QWidget(parent)
    , ui(new Ui::BluetoothWindow)
    , bluetoothManager(nullptr)
    , logger(nullptr)
    , fileSender(nullptr)
    , btConnection(nullptr)
    , btReceiver(nullptr)
    , selectedDeviceIndex(-1)
    , isDeviceConnected(false)
{
    ui->setupUi(this);
    setupUI();

    // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = new BluetoothLogger(this);
    connect(logger, &BluetoothLogger::logToUI,
            this, &BluetoothWindow::addLogMessage);
    
    logger->info("UI", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("UI", "BLUETOOTH WINDOW –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø");
    logger->info("UI", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("UI", "");
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–µ–º–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤ —Å –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    btReceiver = new BluetoothReceiver(logger, this);
    btReceiver->setAutoPlay(true);  // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ!
    
    connect(btReceiver, &BluetoothReceiver::fileReceived,
            this, [this](const QString &filePath) {
                logger->success("UI", QString("‚úì –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: %1").arg(filePath));
            });
    connect(btReceiver, &BluetoothReceiver::playbackStarted,
            this, [this](const QString &fileName) {
                logger->success("UI", QString("üéµ –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: %1").arg(fileName));
            });
    
    // –°–æ–∑–¥–∞–µ–º RFCOMM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    btConnection = new BluetoothConnection(logger, this);
    connect(btConnection, &BluetoothConnection::connectionEstablished,
            this, [this](const QString &deviceName) {
                isDeviceConnected = true;
                updateButtonStates();
                logger->success("UI", QString("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫: %1").arg(deviceName));
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                btReceiver->startListening(btConnection);
            });
    connect(btConnection, &BluetoothConnection::connectionFailed,
            this, [this](const QString &error) {
                isDeviceConnected = false;
                updateButtonStates();
                logger->error("UI", QString("‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %1").arg(error));
            });
    connect(btConnection, &BluetoothConnection::disconnected,
            this, [this]() {
                isDeviceConnected = false;
                updateButtonStates();
                logger->info("UI", "–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
                btReceiver->stopListening();
            });
    
    // –°–æ–∑–¥–∞–µ–º OBEX sender –¥–ª—è Android
    obexSender = new ObexFileSender(logger, this);
    connect(obexSender, &ObexFileSender::transferStarted,
            this, [this](const QString &fileName) {
                logger->info("Transfer", QString("OBEX: –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–¥–∞—á–∏: %1").arg(fileName));
                ui->progressBar->setVisible(true);
                ui->progressBar->setValue(0);
            });
    connect(obexSender, &ObexFileSender::transferProgress,
            this, [this](qint64 bytesSent, qint64 totalBytes) {
                if (totalBytes > 0) {
                    int progress = (bytesSent * 100) / totalBytes;
                    ui->progressBar->setValue(progress);
                }
            });
    connect(obexSender, &ObexFileSender::transferCompleted,
            this, [this](const QString &fileName) {
                logger->success("Transfer", QString("OBEX: –§–∞–π–ª –ø–µ—Ä–µ–¥–∞–Ω: %1").arg(fileName));
                ui->progressBar->setValue(100);
            });
    connect(obexSender, &ObexFileSender::transferFailed,
            this, [this](const QString &error) {
                logger->error("Transfer", QString("OBEX: –û—à–∏–±–∫–∞: %1").arg(error));
                ui->progressBar->setVisible(false);
            });
    
    // –°–æ–∑–¥–∞–µ–º Bluetooth —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ —Ñ–∞–π–ª–æ–≤ –ü–ö-–ü–ö
    btServer = new BluetoothServer(logger, this);
    connect(btServer, &BluetoothServer::serverStarted,
            this, [this]() {
                logger->success("Server", "‚úì –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω");
                ui->serverStatusLabel->setText("–°–µ—Ä–≤–µ—Ä: –ó–∞–ø—É—â–µ–Ω");
                ui->serverStatusLabel->setStyleSheet("font-size: 12px; padding: 5px; color: #4CAF50; font-weight: bold;");
                ui->startServerButton->setEnabled(false);
                ui->stopServerButton->setEnabled(true);
            });
    connect(btServer, &BluetoothServer::serverStopped,
            this, [this]() {
                logger->info("Server", "–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                ui->serverStatusLabel->setText("–°–µ—Ä–≤–µ—Ä: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                ui->serverStatusLabel->setStyleSheet("font-size: 12px; padding: 5px; color: #666;");
                ui->startServerButton->setEnabled(true);
                ui->stopServerButton->setEnabled(false);
            });
    connect(btServer, &BluetoothServer::fileReceived,
            this, [this](const QString &fileName) {
                logger->success("Server", QString("‚úì –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: %1").arg(fileName));
            });
    connect(btServer, &BluetoothServer::transferProgress,
            this, [this](qint64 bytesReceived, qint64 totalBytes) {
                if (totalBytes > 0) {
                    int progress = (bytesReceived * 100) / totalBytes;
                    ui->progressBar->setValue(progress);
                }
            });
    connect(btServer, &BluetoothServer::transferCompleted,
            this, [this](const QString &fileName) {
                logger->success("Server", QString("‚úì –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %1").arg(fileName));
                ui->progressBar->setValue(100);
                QTimer::singleShot(2000, [this]() {
                    ui->progressBar->setVisible(false);
                });
            });
    connect(btServer, &BluetoothServer::transferFailed,
            this, [this](const QString &error) {
                logger->error("Server", QString("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %1").arg(error));
                ui->progressBar->setVisible(false);
            });
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—Å–µ–Ω–¥–µ—Ä (–¥–ª—è RFCOMM)
    fileSender = new BluetoothFileSender(logger, this);
    connect(fileSender, &BluetoothFileSender::transferStarted,
            this, [this](const QString &fileName) {
                logger->info("Transfer", QString("–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–¥–∞—á–∏: %1").arg(fileName));
                ui->progressBar->setVisible(true);
                ui->progressBar->setValue(0);
            });
    connect(fileSender, &BluetoothFileSender::transferProgress,
            this, [this](qint64 bytesSent, qint64 totalBytes) {
                if (totalBytes > 0) {
                    int progress = (bytesSent * 100) / totalBytes;
                    ui->progressBar->setValue(progress);
                }
            });
    connect(fileSender, &BluetoothFileSender::transferCompleted,
            this, [this](const QString &fileName) {
                logger->success("Transfer", QString("–§–∞–π–ª –ø–µ—Ä–µ–¥–∞–Ω: %1").arg(fileName));
                ui->progressBar->setValue(100);
            });
    connect(fileSender, &BluetoothFileSender::transferFailed,
            this, [this](const QString &error) {
                logger->error("Transfer", QString("–û—à–∏–±–∫–∞: %1").arg(error));
                ui->progressBar->setVisible(false);
            });
    
    // –°–æ–∑–¥–∞–µ–º Windows Bluetooth –º–µ–Ω–µ–¥–∂–µ—Ä
    logger->info("UI", "–°–æ–∑–¥–∞–Ω–∏–µ WindowsBluetoothManager...");
    bluetoothManager = new WindowsBluetoothManager(this);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    connect(bluetoothManager, &WindowsBluetoothManager::deviceDiscovered,
            this, &BluetoothWindow::onDeviceDiscovered);
    connect(bluetoothManager, &WindowsBluetoothManager::discoveryFinished,
            this, &BluetoothWindow::onDiscoveryFinished);
    connect(bluetoothManager, &WindowsBluetoothManager::discoveryError,
            this, &BluetoothWindow::onDiscoveryError);

    connect(bluetoothManager, &WindowsBluetoothManager::logMessage,
            this, &BluetoothWindow::onLogMessage);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
    connect(ui->scanButton, &QPushButton::clicked,
            this, &BluetoothWindow::onScanButtonClicked);
    connect(ui->clearLogButton, &QPushButton::clicked,
            this, &BluetoothWindow::onClearLogButtonClicked);
    connect(ui->refreshAdapterButton, &QPushButton::clicked,
            this, &BluetoothWindow::onRefreshAdapterButtonClicked);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
    connect(ui->connectButton, &QPushButton::clicked,
            this, &BluetoothWindow::onConnectButtonClicked);
    connect(ui->disconnectButton, &QPushButton::clicked,
            this, &BluetoothWindow::onDisconnectButtonClicked);
    connect(ui->sendFileButton, &QPushButton::clicked,
            this, &BluetoothWindow::onSendFileButtonClicked);
    connect(ui->startServerButton, &QPushButton::clicked,
            this, &BluetoothWindow::onStartServerButtonClicked);
    connect(ui->stopServerButton, &QPushButton::clicked,
            this, &BluetoothWindow::onStopServerButtonClicked);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
    connect(ui->devicesTable, &QTableWidget::itemSelectionChanged,
            this, &BluetoothWindow::onDeviceSelectionChanged);
    
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    ui->connectButton->setEnabled(false);
    ui->disconnectButton->setEnabled(false);
    ui->sendFileButton->setEnabled(false);
    ui->startServerButton->setEnabled(true);
    ui->stopServerButton->setEnabled(false);

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞–ª—å–Ω–æ–º –∞–¥–∞–ø—Ç–µ—Ä–µ
    logger->info("Adapter", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Adapter", "–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û BLUETOOTH –ê–î–ê–ü–¢–ï–†–ï");
    logger->info("Adapter", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Adapter", QString("–ò–º—è: %1").arg(bluetoothManager->getLocalDeviceName()));
    logger->info("Adapter", QString("MAC: %1").arg(bluetoothManager->getLocalDeviceAddress()));
    logger->info("Adapter", "");

    if (!bluetoothManager->isBluetoothAvailable()) {
        logger->error("Adapter", "‚úó Bluetooth –∞–¥–∞–ø—Ç–µ—Ä –ù–ï –ù–ê–ô–î–ï–ù!");
        logger->warning("Adapter", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Bluetooth –≤–∫–ª—é—á–µ–Ω –≤ Windows");
        logger->info("Adapter", "");
        QMessageBox::warning(this, "Bluetooth",
                             "Bluetooth –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Bluetooth –≤–∫–ª—é—á–µ–Ω –≤ Windows.");
    } else {
        logger->success("Adapter", "‚úì Bluetooth –∞–¥–∞–ø—Ç–µ—Ä –ê–ö–¢–ò–í–ï–ù!");
        logger->info("Adapter", "");
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É OBEX
    logger->info("Features", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...");
    bool obexSupported = fileSender->isObexSupported();
    if (!obexSupported) {
        logger->warning("Features", "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }
    logger->info("Features", "");
    
    logger->success("UI", "‚úì Bluetooth Window –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!");
    logger->info("UI", "");
}

BluetoothWindow::~BluetoothWindow()
{
    delete ui;
}

void BluetoothWindow::setupUI()
{
    setWindowTitle("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 6 - Bluetooth (Windows Native API)");
    setMinimumSize(1100, 750);  // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    ui->devicesTable->setColumnCount(5);
    ui->devicesTable->setHorizontalHeaderLabels({"‚Ññ", "–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "MAC –∞–¥—Ä–µ—Å", "–¢–∏–ø", "–°—Ç–∞—Ç—É—Å"});
    ui->devicesTable->setSelectionBehavior(QAbstractItemView::SelectRows);
    ui->devicesTable->setSelectionMode(QAbstractItemView::SingleSelection);
    ui->devicesTable->setEditTriggers(QAbstractItemView::NoEditTriggers);
    ui->devicesTable->horizontalHeader()->setStretchLastSection(true);
    ui->devicesTable->setColumnWidth(0, 50);
    ui->devicesTable->setColumnWidth(1, 250);   // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∏–º—ë–Ω
    ui->devicesTable->setColumnWidth(2, 150);
    ui->devicesTable->setColumnWidth(3, 120);
    // –ö–æ–ª–æ–Ω–∫–∞ 4 (–°—Ç–∞—Ç—É—Å) —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ui->progressBar->setVisible(false);
}

void BluetoothWindow::addLogMessage(const QString &message, const QString &color)
{
    QString timestamp = getCurrentTimestamp();
    QString htmlMessage = QString("<font color='gray'>%1</font> <font color='%2'>%3</font>")
                              .arg(timestamp)
                              .arg(color)
                              .arg(message);
    ui->logTextEdit->append(htmlMessage);
}

QString BluetoothWindow::getCurrentTimestamp() const
{
    return QDateTime::currentDateTime().toString("[HH:mm:ss]");
}

// –°–ª–æ—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫

void BluetoothWindow::onScanButtonClicked()
{
    logger->info("Scan", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Scan", "–ù–ê–ß–ê–õ–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –£–°–¢–†–û–ô–°–¢–í");
    logger->info("Scan", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->debug("Scan", "–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤");
    
    ui->devicesTable->setRowCount(0);
    discoveredDevices.clear();
    selectedDeviceIndex = -1;
    updateButtonStates();
    
    logger->info("Scan", "–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ WinAPI...");
    bluetoothManager->startDeviceDiscovery();
    
    ui->scanButton->setEnabled(false);
    ui->scanButton->setText("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...");
    logger->info("Scan", "");
}

void BluetoothWindow::onClearLogButtonClicked()
{
    ui->logTextEdit->clear();
    addLogMessage("–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω", "gray");
}

void BluetoothWindow::onRefreshAdapterButtonClicked()
{
    addLogMessage("=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–∞–ø—Ç–µ—Ä–µ ===", "blue");
    addLogMessage("–õ–æ–∫–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: " + bluetoothManager->getLocalDeviceName());
    addLogMessage("–ê–¥—Ä–µ—Å: " + bluetoothManager->getLocalDeviceAddress());

    if (bluetoothManager->isBluetoothAvailable()) {
        addLogMessage("‚úì Bluetooth –∞–¥–∞–ø—Ç–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω", "green");
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        QList<BluetoothDeviceData> connected = bluetoothManager->getConnectedDevices();
        if (!connected.isEmpty()) {
            addLogMessage(QString("–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %1").arg(connected.count()), "green");
            for (const BluetoothDeviceData &dev : connected) {
                addLogMessage(QString("  ‚Ä¢ %1 (%2)").arg(dev.name).arg(dev.address), "darkgreen");
            }
        } else {
            addLogMessage("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "gray");
        }
    } else {
        addLogMessage("‚úó Bluetooth –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!", "red");
    }
}

// –°–ª–æ—Ç—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π Bluetooth

void BluetoothWindow::onDeviceDiscovered(const BluetoothDeviceData &device)
{
    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫
    discoveredDevices.append(device);

    int row = ui->devicesTable->rowCount();
    ui->devicesTable->insertRow(row);

    // –ù–æ–º–µ—Ä
    ui->devicesTable->setItem(row, 0, new QTableWidgetItem(QString::number(row + 1)));

    // –ò–º—è
    QString name = device.name.isEmpty() ? "–ë–µ–∑ –∏–º–µ–Ω–∏" : device.name;
    ui->devicesTable->setItem(row, 1, new QTableWidgetItem(name));

    // MAC –∞–¥—Ä–µ—Å
    ui->devicesTable->setItem(row, 2, new QTableWidgetItem(device.address));

    // –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    ui->devicesTable->setItem(row, 3, new QTableWidgetItem(device.getDeviceTypeString()));
    
    // –°—Ç–∞—Ç—É—Å
    QString status;
    if (device.isConnected) status += "üîµ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ ";
    if (device.isPaired) status += "üîó –°–æ–ø—Ä—è–∂–µ–Ω–æ ";
    if (device.isRemembered) status += "üíæ –ó–∞–ø–æ–º–Ω–µ–Ω–æ ";
    if (status.isEmpty()) status = "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ";
    
    ui->devicesTable->setItem(row, 4, new QTableWidgetItem(status.trimmed()));
}

void BluetoothWindow::onDiscoveryFinished(int deviceCount)
{
    addLogMessage("=== –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===", "blue");
    addLogMessage(QString("–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %1").arg(deviceCount), "green");
    ui->scanButton->setEnabled(true);
    ui->scanButton->setText("–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å");
    updateButtonStates();
}

void BluetoothWindow::onDiscoveryError(const QString &errorString)
{
    addLogMessage("–û–®–ò–ë–ö–ê: " + errorString, "red");
    ui->scanButton->setEnabled(true);
    ui->scanButton->setText("–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å");
}

void BluetoothWindow::onLogMessage(const QString &message)
{
    addLogMessage(message);
}

void BluetoothWindow::onDeviceSelectionChanged()
{
    selectedDeviceIndex = ui->devicesTable->currentRow();
    updateButtonStates();
}

void BluetoothWindow::updateButtonStates()
{
    bool deviceSelected = (selectedDeviceIndex >= 0 && selectedDeviceIndex < discoveredDevices.size());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    bool canSendFiles = false;
    if (deviceSelected) {
        const BluetoothDeviceData &device = discoveredDevices[selectedDeviceIndex];
        canSendFiles = device.canSendFilesTo();
        
        // –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã - –º–µ–Ω—è–µ–º tooltip –∫–Ω–æ–ø–∫–∏
        if (!canSendFiles) {
            BluetoothDeviceCapabilities caps = device.getCapabilities();
            ui->sendFileButton->setToolTip(QString("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ: %1").arg(caps.blockReason));
        } else {
            ui->sendFileButton->setToolTip("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ");
        }
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å" –¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ –∏ –ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
    // –ù–û —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã!
    ui->connectButton->setEnabled(deviceSelected && !isDeviceConnected && canSendFiles);
    
    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª—é—á–∏—Ç—å" –¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    ui->disconnectButton->setEnabled(isDeviceConnected);
    
    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª" –¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏:
    // 1. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ
    // 2. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã  
    // 3. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OBEX (—Ç–µ–ª–µ—Ñ–æ–Ω—ã –ò –∫–æ–º–ø—å—é—Ç–µ—Ä—ã)
    if (deviceSelected && canSendFiles) {
        const BluetoothDeviceData &device = discoveredDevices[selectedDeviceIndex];
        BluetoothDeviceCapabilities caps = device.getCapabilities();
        
        // OBEX —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        ui->sendFileButton->setEnabled(caps.supportsOBEX);
    } else {
        ui->sendFileButton->setEnabled(false);
    }
}

void BluetoothWindow::onConnectButtonClicked()
{
    if (selectedDeviceIndex < 0 || selectedDeviceIndex >= discoveredDevices.size()) {
        logger->error("Connect", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ!");
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
        return;
    }
    
    const BluetoothDeviceData &device = discoveredDevices[selectedDeviceIndex];
    
    logger->info("Connect", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Connect", "–ü–û–ü–´–¢–ö–ê RFCOMM –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø");
    logger->info("Connect", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Connect", QString("–¶–µ–ª–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %1").arg(device.name.isEmpty() ? "(–ë–µ–∑ –∏–º–µ–Ω–∏)" : device.name));
    logger->info("Connect", QString("MAC –∞–¥—Ä–µ—Å: %1").arg(device.address));
    logger->info("Connect", QString("–¢–∏–ø: %1").arg(device.getDeviceTypeString()));
    logger->info("Connect", "");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–ø—Ä—è–∂–µ–Ω–∏–µ
    if (!device.isPaired) {
        logger->error("Connect", "‚úó –£–°–¢–†–û–ô–°–¢–í–û –ù–ï –°–û–ü–†–Ø–ñ–ï–ù–û!");
        logger->warning("Connect", "–°–Ω–∞—á–∞–ª–∞ —Å–æ–ø—Ä—è–≥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ Windows");
        
        QMessageBox::critical(this, "–ù–µ —Å–æ–ø—Ä—è–∂–µ–Ω–æ",
            QString("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '%1' –Ω–µ —Å–æ–ø—Ä—è–∂–µ–Ω–æ.\n\n"
                    "–û—Ç–∫—Ä–æ–π—Ç–µ: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Üí Bluetooth\n"
                    "–ù–∞–∂–º–∏—Ç–µ: –î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            .arg(device.name.isEmpty() ? device.address : device.name));
        return;
    }
    
    logger->success("Connect", "‚úì –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–ø—Ä—è–∂–µ–Ω–æ");
    logger->info("Connect", "");
    logger->warning("Connect", "‚è± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-30 —Å–µ–∫—É–Ω–¥...");
    logger->info("Connect", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");
    logger->info("Connect", "");
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º UI –Ω–∞ –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    ui->connectButton->setEnabled(false);
    ui->connectButton->setText("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ RFCOMM
    logger->info("Connect", "–í—ã–∑–æ–≤ BluetoothConnection::connectToDevice()...");
    bool success = btConnection->connectToDevice(device.address, device.name);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    ui->connectButton->setText("–ü–æ–¥–∫–ª—é—á–∏—Ç—å");
    updateButtonStates();
    
    if (success) {
        logger->success("Connect", "");
        logger->success("Connect", "‚úì‚úì‚úì –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û! ‚úì‚úì‚úì");
        logger->info("Connect", "");
        logger->info("Connect", "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é!");
        logger->info("Connect", "");
        
        QMessageBox::information(this, "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ!",
            QString("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É:\n\n"
                    "%1\n"
                    "%2\n\n"
                    "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã!")
            .arg(device.name)
            .arg(device.address));
    } else {
        logger->error("Connect", "");
        logger->error("Connect", "‚úó‚úó‚úó –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ï –£–î–ê–õ–û–°–¨ ‚úó‚úó‚úó");
        logger->error("Connect", "");
        logger->warning("Connect", "–°–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ —Ñ–∞–π–ª–µ connect.log");
        logger->info("Connect", "");
        logger->info("Connect", "–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê:");
        logger->info("Connect", "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –ë–ï–ó RFCOMM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
        logger->info("Connect", "—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª' (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç fsquirt)");
        logger->info("Connect", "");
    }
}

void BluetoothWindow::onDisconnectButtonClicked()
{
    logger->info("Connect", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Connect", "–û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –û–¢ –£–°–¢–†–û–ô–°–¢–í–ê");
    logger->info("Connect", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Connect", "–ó–∞–∫—Ä—ã—Ç–∏–µ RFCOMM —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
    
    btConnection->disconnect();
    
    logger->success("Connect", "‚úì –û—Ç–∫–ª—é—á–µ–Ω–æ");
    logger->info("Connect", "");
    
    QMessageBox::information(this, "–û—Ç–∫–ª—é—á–µ–Ω–æ", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ");
}

void BluetoothWindow::onSendFileButtonClicked()
{
    if (selectedDeviceIndex < 0 || selectedDeviceIndex >= discoveredDevices.size()) {
        logger->error("Send", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ!");
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ");
        return;
    }
    
    const BluetoothDeviceData &device = discoveredDevices[selectedDeviceIndex];
    
    logger->info("Send", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Send", "–û–¢–ü–†–ê–í–ö–ê –§–ê–ô–õ–ê –ù–ê BLUETOOTH –£–°–¢–†–û–ô–°–¢–í–û");
    logger->info("Send", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Send", QString("–¶–µ–ª–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %1").arg(device.name));
    logger->info("Send", QString("MAC –∞–¥—Ä–µ—Å: %1").arg(device.address));
    logger->debug("Send", QString("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ: %1").arg(device.isConnected ? "–î–ê" : "–ù–ï–¢"));
    logger->debug("Send", QString("–°–æ–ø—Ä—è–∂–µ–Ω–æ: %1").arg(device.isPaired ? "–î–ê" : "–ù–ï–¢"));
    logger->info("Send", "");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–ø—Ä—è–∂–µ–Ω–∏–µ
    if (!device.isPaired) {
        logger->error("Send", "‚úó –£–°–¢–†–û–ô–°–¢–í–û –ù–ï –°–û–ü–†–Ø–ñ–ï–ù–û!");
        logger->warning("Send", "–°–Ω–∞—á–∞–ª–∞ —Å–æ–ø—Ä—è–≥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ Windows");
        
        QMessageBox::critical(this, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ —Å–æ–ø—Ä—è–∂–µ–Ω–æ",
            QString("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '%1' –Ω–µ —Å–æ–ø—Ä—è–∂–µ–Ω–æ —Å –≤–∞—à–∏–º –ü–ö.\n\n"
                    "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –î–û–õ–ñ–ù–û –±—ã—Ç—å —Å–æ–ø—Ä—è–∂–µ–Ω–æ.\n\n"
                    "–ö–∞–∫ —Å–æ–ø—Ä—è—á—å:\n"
                    "1. –û—Ç–∫—Ä–æ–π—Ç–µ: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Windows ‚Üí Bluetooth\n"
                    "2. –ù–∞–∂–º–∏—Ç–µ: –î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
                    "3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à %2")
            .arg(device.name.isEmpty() ? device.address : device.name)
            .arg(device.getDeviceTypeString()));
        return;
    }
    
    logger->success("Send", "‚úì –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–ø—Ä—è–∂–µ–Ω–æ");
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª
    logger->info("Send", "–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞...");
    
    QString fileName = QFileDialog::getOpenFileName(
        this,
        QString("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞: %1").arg(device.name),
        QDir::homePath(),
        "–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã (*.mp3 *.wav *.ogg *.flac *.m4a);;–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.jpg *.jpeg *.png *.gif);;–í–∏–¥–µ–æ (*.mp4 *.avi *.mkv);;–î–æ–∫—É–º–µ–Ω—Ç—ã (*.pdf *.doc *.docx *.txt);;–í—Å–µ —Ñ–∞–π–ª—ã (*)");
    
    if (fileName.isEmpty()) {
        logger->warning("Send", "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
        return;
    }
    
    QFileInfo fileInfo(fileName);
    logger->success("Send", QString("‚úì –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: %1").arg(fileInfo.fileName()));
    logger->debug("Send", QString("–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: %1").arg(fileName));
    logger->debug("Send", QString("–†–∞–∑–º–µ—Ä: %1 –±–∞–π—Ç (%2 MB)")
        .arg(fileInfo.size())
        .arg(fileInfo.size() / 1024.0 / 1024.0, 0, 'f', 2));
    logger->info("Send", "");
    
    // –£–ú–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ú–ï–¢–û–î–ê –û–¢–ü–†–ê–í–ö–ò
    BluetoothDeviceCapabilities caps = device.getCapabilities();
    
    logger->info("Send", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Send", "–ê–ù–ê–õ–ò–ó –£–°–¢–†–û–ô–°–¢–í–ê");
    logger->info("Send", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Send", QString("–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %1").arg(device.getDeviceTypeString()));
    logger->info("Send", QString("–ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã: %1").arg(caps.canReceiveFiles ? "–î–ê" : "–ù–ï–¢"));
    logger->info("Send", QString("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç RFCOMM: %1").arg(caps.supportsRFCOMM ? "–î–ê" : "–ù–ï–¢"));
    logger->info("Send", QString("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OBEX: %1").arg(caps.supportsOBEX ? "–î–ê" : "–ù–ï–¢"));
    logger->info("Send", QString("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥: %1").arg(caps.recommendedMethod));
    logger->info("Send", "");
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏
    bool useOBEX = false;
    
    if (caps.supportsOBEX) {
        // –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å OBEX - —Ç–µ–ª–µ—Ñ–æ–Ω—ã –ò –∫–æ–º–ø—å—é—Ç–µ—Ä—ã
        useOBEX = true;
        logger->success("Send", "‚úì –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OBEX");
        logger->info("Send", "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ü–†–Ø–ú–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ OBEX –ø—Ä–æ—Ç–æ–∫–æ–ª");
        logger->info("Send", "–ë–ï–ó fsquirt - –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç!");
    } else {
        logger->error("Send", "");
        logger->error("Send", "‚úó –û–¢–ü–†–ê–í–ö–ê –ù–ï –í–û–ó–ú–û–ñ–ù–ê!");
        logger->error("Send", QString("–ü—Ä–∏—á–∏–Ω–∞: %1").arg(caps.blockReason));
        logger->error("Send", "");
        
        QMessageBox::critical(this, "–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞",
            QString("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ %1\n\n"
                    "–ü—Ä–∏—á–∏–Ω–∞: %2")
            .arg(device.name)
            .arg(caps.blockReason));
        return;
    }
    
    // –í–´–ü–û–õ–ù–Ø–ï–ú –û–¢–ü–†–ê–í–ö–£ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
    logger->info("Send", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Send", "–í–´–ü–û–õ–ù–ï–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò");
    logger->info("Send", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Send", "");
    
    bool success = false;
    
    if (useOBEX) {
        // –ü–†–Ø–ú–ê–Ø –û–¢–ü–†–ê–í–ö–ê —á–µ—Ä–µ–∑ OBEX –ø—Ä–æ—Ç–æ–∫–æ–ª (–¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ò –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤)
        QString deviceType = device.getDeviceTypeString();
        logger->info("Send", QString("–ú–µ—Ç–æ–¥: OBEX –ø—Ä–æ—Ç–æ–∫–æ–ª (–ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ %1)").arg(deviceType));
        logger->info("Send", "–ë–ï–ó FSQUIRT - —Ç–æ–ª—å–∫–æ OBEX —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç!");
        logger->info("Send", "");
        
        ui->progressBar->setVisible(true);
        ui->progressBar->setValue(0);
        
        // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (deviceType == "–ö–æ–º–ø—å—é—Ç–µ—Ä") {
            // –î–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º RFCOMM (–ü–ö-–ü–ö –ø–µ—Ä–µ–¥–∞—á–∞)
            logger->info("Send", "–í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥: RFCOMM –¥–ª—è –ü–ö-–ü–ö –ø–µ—Ä–µ–¥–∞—á–∏");
            success = obexSender->sendFileViaRfcomm(fileName, device.address, device.name);
        } else {
            // –î–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º OBEX
            logger->info("Send", "–í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥: OBEX –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤");
            success = obexSender->sendFileViaObex(fileName, device.address, device.name);
        }
        
        if (success) {
            logger->success("Send", "");
            logger->success("Send", "‚úì‚úì‚úì –§–ê–ô–õ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù! ‚úì‚úì‚úì");
            logger->info("Send", QString("–§–∞–π–ª: %1 (%2 MB)")
                .arg(fileInfo.fileName())
                .arg(fileInfo.size() / 1024.0 / 1024.0, 0, 'f', 2));
            logger->info("Send", QString("–ú–µ—Ç–æ–¥: OBEX (–ø—Ä—è–º–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è %1)").arg(deviceType));
            logger->info("Send", "–ë–ï–ó fsquirt - –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç!");
            logger->info("Send", "");
            
            QString message;
            if (deviceType == "–ö–æ–º–ø—å—é—Ç–µ—Ä") {
                message = QString("‚úì –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                        "–§–∞–π–ª: %1 (%2 MB)\n"
                        "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %3 (–ö–æ–º–ø—å—é—Ç–µ—Ä)\n\n"
                        "–ú–µ—Ç–æ–¥: RFCOMM –ø—Ä–æ—Ç–æ–∫–æ–ª (–ü–ö-–ü–ö)\n\n"
                        "–ù–∞ %3 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω Bluetooth —Å–µ—Ä–≤–µ—Ä!\n"
                        "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –∫–∞–∫ received_file_*.bin\n\n"
                        "–í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–º –ü–ö:\n"
                        "1. –ó–∞–ø—É—â–µ–Ω Bluetooth —Å–µ—Ä–≤–µ—Ä\n"
                        "2. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∏–¥–∏–º–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö")
                    .arg(fileInfo.fileName())
                    .arg(fileInfo.size() / 1024.0 / 1024.0, 0, 'f', 2)
                    .arg(device.name);
            } else {
                message = QString("‚úì –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                        "–§–∞–π–ª: %1 (%2 MB)\n"
                        "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %3 (%4)\n\n"
                        "–ú–µ—Ç–æ–¥: OBEX –ø—Ä–æ—Ç–æ–∫–æ–ª\n\n"
                        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.")
                    .arg(fileInfo.fileName())
                    .arg(fileInfo.size() / 1024.0 / 1024.0, 0, 'f', 2)
                    .arg(device.name)
                    .arg(deviceType);
            }
            
            QMessageBox::information(this, "–£—Å–ø–µ—à–Ω–æ!", message);
                
            QTimer::singleShot(2000, [this]() {
                ui->progressBar->setVisible(false);
            });
        } else {
            ui->progressBar->setVisible(false);
            
            logger->error("Send", "");
            logger->error("Send", "‚úó‚úó‚úó –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ß–ï–†–ï–ó OBEX ‚úó‚úó‚úó");
            logger->error("Send", "");
            if (deviceType == "–ö–æ–º–ø—å—é—Ç–µ—Ä") {
                logger->warning("Send", "–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ (–ü–ö-–ü–ö):");
                logger->warning("Send", "1. –ù–∞ –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–º –ü–ö –Ω–µ –∑–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–µ—Ä");
                logger->warning("Send", "2. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤–∏–¥–∏–º–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö");
                logger->warning("Send", "3. RFCOMM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                logger->warning("Send", "4. Bluetooth –¥—Ä–∞–π–≤–µ—Ä—ã —É—Å—Ç–∞—Ä–µ–ª–∏");
                logger->warning("Send", "");
                logger->info("Send", "–†–ï–®–ï–ù–ò–ï: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–º –ü–ö!");
            } else {
                logger->warning("Send", "–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ (–¢–µ–ª–µ—Ñ–æ–Ω):");
                logger->warning("Send", "1. –¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–µ—Ä–µ–¥–∞—á—É —Ñ–∞–π–ª–∞");
                logger->warning("Send", "2. –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OBEX Push");
                logger->warning("Send", "3. Bluetooth –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ");
                logger->warning("Send", "");
            }
            logger->info("Send", "–°–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ send.log –∏ api_calls.log");
            logger->info("Send", "");
            
            QString errorMessage;
            if (deviceType == "–ö–æ–º–ø—å—é—Ç–µ—Ä") {
                errorMessage = QString("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ü–ö.\n\n"
                        "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        "‚Ä¢ –ù–∞ –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–º –ü–ö –Ω–µ –∑–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–µ—Ä\n"
                        "‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤–∏–¥–∏–º–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö\n"
                        "‚Ä¢ RFCOMM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                        "–†–ï–®–ï–ù–ò–ï: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–º –ü–ö!\n\n"
                        "–î–µ—Ç–∞–ª–∏ –≤ send.log");
            } else {
                errorMessage = QString("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω.\n\n"
                        "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        "‚Ä¢ –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —Ñ–∞–π–ª –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n"
                        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OBEX Push\n"
                        "‚Ä¢ Bluetooth –≤—ã–∫–ª—é—á–µ–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n\n"
                        "–î–µ—Ç–∞–ª–∏ –≤ send.log");
            }
            
            QMessageBox::critical(this, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", errorMessage);
        }
    }
}

void BluetoothWindow::onStartServerButtonClicked()
{
    logger->info("Server", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Server", "–ó–ê–ü–£–°–ö BLUETOOTH –°–ï–†–í–ï–†–ê");
    logger->info("Server", "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    logger->info("Server", "");
    logger->info("Server", "–°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –ü–ö");
    logger->info("Server", "–ü–æ—Ä—Ç: 11 (RFCOMM)");
    logger->info("Server", "");
    
    btServer->startServer();
}

void BluetoothWindow::onStopServerButtonClicked()
{
    logger->info("Server", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Bluetooth —Å–µ—Ä–≤–µ—Ä–∞...");
    btServer->stopServer();
}

