#include "camerawindow.h"
#include "cameraworker.h"
#include "jakecamerawarning.h"
#include <QMessageBox>
#include <QGroupBox>
#include <QSplitter>
#include <QDebug>
#include <QCloseEvent>
#include <windows.h>

CameraWindow::CameraWindow(QWidget *parent)
    : QWidget(parent),
      cameraWorker(nullptr),
      isRecording(false),
      isPreviewEnabled(true),
      recordingIndicatorVisible(false),
      globalHotkeysRegistered(false)
{
    setWindowTitle("–õ–† 4: –†–∞–±–æ—Ç–∞ —Å –≤–µ–±-–∫–∞–º–µ—Ä–æ–π (DirectShow API)");
    resize(1000, 700);
    
    setupUI();
    
    // –°–æ–∑–¥–∞–µ–º worker –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–º–µ—Ä–æ–π
    cameraWorker = new CameraWorker();
    
    // –°–æ–∑–¥–∞–µ–º Jake –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    jakeWarning = new JakeCameraWarning(this);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
    connect(cameraWorker, &CameraWorker::videoRecordingStarted, this, &CameraWindow::onVideoRecordingStarted);
    connect(cameraWorker, &CameraWorker::videoRecordingStopped, this, &CameraWindow::onVideoRecordingStopped);
    connect(cameraWorker, &CameraWorker::photoSaved, this, &CameraWindow::onPhotoSaved);
    connect(cameraWorker, &CameraWorker::errorOccurred, this, &CameraWindow::onError);
    connect(cameraWorker, &CameraWorker::cameraInfoReady, this, &CameraWindow::onCameraInfoReady);
    connect(cameraWorker, &CameraWorker::frameReady, this, &CameraWindow::onFrameReady);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    setupHotkeys();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    isRecording = false;
    isPreviewEnabled = false;
    isVideoRecording = false;
    
    // –¢–∞–π–º–µ—Ä –¥–ª—è –º–∏–≥–∞—é—â–µ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–ø–∏—Å–∏
    recordingBlinkTimer = new QTimer(this);
    connect(recordingBlinkTimer, &QTimer::timeout, this, [this]() {
        recordingIndicatorVisible = !recordingIndicatorVisible;
        if (recordingIndicatorVisible) {
            recordingIndicator->setStyleSheet("QLabel { background-color: red; color: white; padding: 5px; border-radius: 3px; font-weight: bold; }");
            recordingIndicator->setText("‚óè REC");
        } else {
            recordingIndicator->setStyleSheet("QLabel { background-color: transparent; color: transparent; padding: 5px; }");
            recordingIndicator->setText("      ");
        }
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–≤—å—é
    if (cameraWorker->isInitialized()) {
        cameraWorker->startPreview();
        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ü—Ä–µ–≤—å—é –∞–∫—Ç–∏–≤–Ω–æ (DirectShow API)");
        
        // Jake –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã
        QTimer::singleShot(500, this, [this]() {
            jakeWarning->showWarning(JakeCameraWarning::CAMERA_STARTED);
        });
    } else {
        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ - –∫–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }
}

CameraWindow::~CameraWindow()
{
    qDebug() << "CameraWindow destructor called";
    
    // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
    unregisterGlobalHotkeys();
    
    if (cameraWorker) {
        qDebug() << "Stopping camera worker...";
        cameraWorker->stopAll();
        delete cameraWorker;
        cameraWorker = nullptr;
    }
    
    qDebug() << "CameraWindow destroyed";
}

void CameraWindow::closeEvent(QCloseEvent *event)
{
    qDebug() << "CameraWindow closeEvent called";
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –∏–¥–µ—Ç
    if (isRecording || isVideoRecording) {
        qDebug() << "Stopping recording on close...";
        cameraWorker->stopVideoRecording();
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –∫–∞–º–µ—Ä—É
    if (cameraWorker) {
        qDebug() << "Stopping all camera operations...";
        cameraWorker->stopAll();
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º Jake
    if (jakeWarning) {
        jakeWarning->hideWarning();
    }
    
    // –û—Ç–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    unregisterGlobalHotkeys();
    
    qDebug() << "CameraWindow closing properly";
    
    event->accept();
}

void CameraWindow::setupUI()
{
    QVBoxLayout *mainLayout = new QVBoxLayout(this);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    QLabel *titleLabel = new QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-–∫–∞–º–µ—Ä–æ–π (DirectShow API - Windows –Ω–∞—Ç–∏–≤–Ω—ã–π)");
    titleLabel->setAlignment(Qt::AlignCenter);
    titleLabel->setStyleSheet(
        "QLabel { font-size: 20px; font-weight: bold; color: #1976D2; padding: 10px; }"
    );
    mainLayout->addWidget(titleLabel);
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Å–ø–ª–∏—Ç—Ç–µ—Ä —Å –ø—Ä–µ–≤—å—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    QSplitter *splitter = new QSplitter(Qt::Horizontal);
    
    // –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ø—Ä–µ–≤—å—é –∫–∞–º–µ—Ä—ã
    QWidget *previewWidget = new QWidget();
    QVBoxLayout *previewLayout = new QVBoxLayout(previewWidget);
    
    QGroupBox *previewGroup = new QGroupBox("–ü—Ä–µ–≤—å—é –∫–∞–º–µ—Ä—ã");
    QVBoxLayout *previewGroupLayout = new QVBoxLayout(previewGroup);
    
    // QLabel –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
    previewLabel = new QLabel("–û–∂–∏–¥–∞–Ω–∏–µ –∫–∞–¥—Ä–æ–≤...");
    previewLabel->setMinimumSize(640, 480);
    previewLabel->setAlignment(Qt::AlignCenter);
    previewLabel->setStyleSheet("QLabel { background-color: #000000; border: 2px solid #1976D2; color: white; }");
    previewLabel->setScaledContents(false); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
    previewGroupLayout->addWidget(previewLabel);
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
    recordingIndicator = new QLabel("");
    recordingIndicator->setAlignment(Qt::AlignCenter);
    recordingIndicator->setStyleSheet("QLabel { background-color: transparent; }");
    recordingIndicator->setFixedHeight(30);
    previewGroupLayout->addWidget(recordingIndicator);
    
    previewLayout->addWidget(previewGroup);
    splitter->addWidget(previewWidget);
    
    // –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    QWidget *controlWidget = new QWidget();
    QVBoxLayout *controlLayout = new QVBoxLayout(controlWidget);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–µ—Ä–µ
    QGroupBox *infoGroup = new QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–µ—Ä–µ");
    QVBoxLayout *infoLayout = new QVBoxLayout(infoGroup);
    
    infoTextEdit = new QTextEdit();
    infoTextEdit->setReadOnly(true);
    infoTextEdit->setMaximumHeight(150);
    infoTextEdit->setPlaceholderText("–ù–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä—ã");
    infoLayout->addWidget(infoTextEdit);
    
    getCameraInfoBtn = new QPushButton("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–µ—Ä–µ");
    getCameraInfoBtn->setStyleSheet(
        "QPushButton { background-color: #4CAF50; color: white; padding: 8px; border-radius: 4px; font-weight: bold; }"
        "QPushButton:hover { background-color: #45a049; }"
        "QPushButton:pressed { background-color: #3d8b40; }"
    );
    connect(getCameraInfoBtn, &QPushButton::clicked, this, &CameraWindow::onGetCameraInfo);
    infoLayout->addWidget(getCameraInfoBtn);
    
    controlLayout->addWidget(infoGroup);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    QGroupBox *controlGroup = new QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");
    QVBoxLayout *controlGroupLayout = new QVBoxLayout(controlGroup);
    
    takePhotoBtn = new QPushButton("üì∑ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ");
    takePhotoBtn->setStyleSheet(
        "QPushButton { background-color: #2196F3; color: white; padding: 10px; border-radius: 4px; font-size: 14px; font-weight: bold; }"
        "QPushButton:hover { background-color: #1976D2; }"
        "QPushButton:pressed { background-color: #0D47A1; }"
    );
    connect(takePhotoBtn, &QPushButton::clicked, this, &CameraWindow::onTakePhoto);
    controlGroupLayout->addWidget(takePhotoBtn);
    
    startStopVideoBtn = new QPushButton("üé• –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ");
    startStopVideoBtn->setStyleSheet(
        "QPushButton { background-color: #FF5722; color: white; padding: 10px; border-radius: 4px; font-size: 14px; font-weight: bold; }"
        "QPushButton:hover { background-color: #E64A19; }"
        "QPushButton:pressed { background-color: #D84315; }"
    );
    connect(startStopVideoBtn, &QPushButton::clicked, this, &CameraWindow::onStartStopVideo);
    controlGroupLayout->addWidget(startStopVideoBtn);
    
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ –≤–∏–¥–µ–æ
    QLabel *videoNote = new QLabel("‚ÑπÔ∏è –í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (—Å–µ—Ä–∏—è –∫–∞–¥—Ä–æ–≤)");
    videoNote->setStyleSheet("QLabel { color: #666; font-size: 10px; padding: 2px; }");
    videoNote->setWordWrap(true);
    controlGroupLayout->addWidget(videoNote);
    
    togglePreviewBtn = new QPushButton("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–≤—å—é");
    togglePreviewBtn->setStyleSheet(
        "QPushButton { background-color: #FF9800; color: white; padding: 8px; border-radius: 4px; font-weight: bold; }"
        "QPushButton:hover { background-color: #F57C00; }"
        "QPushButton:pressed { background-color: #E65100; }"
    );
    connect(togglePreviewBtn, &QPushButton::clicked, this, &CameraWindow::onTogglePreview);
    controlGroupLayout->addWidget(togglePreviewBtn);
    
    controlLayout->addWidget(controlGroup);
    
    // –†–µ–∂–∏–º –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏
    QGroupBox *stealthGroup = new QGroupBox("üïµÔ∏è –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º");
    QVBoxLayout *stealthLayout = new QVBoxLayout(stealthGroup);
    
    QPushButton *hideWindowBtn = new QPushButton("–°–∫—Ä—ã—Ç—å –æ–∫–Ω–æ (—Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º)");
    hideWindowBtn->setStyleSheet(
        "QPushButton { background-color: #9C27B0; color: white; padding: 8px; border-radius: 4px; font-weight: bold; }"
        "QPushButton:hover { background-color: #7B1FA2; }"
    );
    connect(hideWindowBtn, &QPushButton::clicked, this, [this]() {
        QMessageBox::information(this, "–°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º",
            "–û–∫–Ω–æ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–æ.\n"
            "–ö–∞–º–µ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.\n\n"
            "üî• –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò:\n"
            "‚Ä¢ Ctrl+Shift+R - –ù–ê–ß–ê–¢–¨ –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ\n"
            "‚Ä¢ Ctrl+Shift+S - –û–°–¢–ê–ù–û–í–ò–¢–¨ –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ\n"
            "‚Ä¢ Ctrl+Shift+P - –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ\n"
            "‚Ä¢ Ctrl+Shift+Q - –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ (+ –∞–≤—Ç–æ—Å—Ç–æ–ø –∑–∞–ø–∏—Å–∏)\n\n"
            "–†–∞–±–æ—Ç–∞—é—Ç –í–ï–ó–î–ï –≤ Windows!\n\n"
            "–î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ\n"
            "–¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á (Ctrl+Shift+Esc)");
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏
        registerGlobalHotkeys();
        
        // Jake –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ!
        jakeWarning->showWarning(JakeCameraWarning::STEALTH_MODE);
        
        this->hide();
    });
    stealthLayout->addWidget(hideWindowBtn);
    
    QLabel *stealthInfo = new QLabel(
        "‚ö†Ô∏è –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º:\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –æ–∫–Ω–æ\n"
        "‚Ä¢ –ö–∞–º–µ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ"
    );
    stealthInfo->setStyleSheet("QLabel { color: #666; font-size: 11px; padding: 5px; }");
    stealthInfo->setWordWrap(true);
    stealthLayout->addWidget(stealthInfo);
    
    controlLayout->addWidget(stealthGroup);
    
    // –°—Ç–∞—Ç—É—Å
    statusLabel = new QLabel("–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤");
    statusLabel->setStyleSheet(
        "QLabel { background-color: #E3F2FD; padding: 10px; border-radius: 4px; border: 1px solid #1976D2; }"
    );
    statusLabel->setWordWrap(true);
    controlLayout->addWidget(statusLabel);
    
    controlLayout->addStretch();
    
    splitter->addWidget(controlWidget);
    splitter->setStretchFactor(0, 2);
    splitter->setStretchFactor(1, 1);
    
    mainLayout->addWidget(splitter);
}

void CameraWindow::onGetCameraInfo()
{
    infoTextEdit->setText("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–µ—Ä–µ...");
    cameraWorker->getCameraInfo();
}

void CameraWindow::onTakePhoto()
{
    statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ó–∞—Ö–≤–∞—Ç —Ñ–æ—Ç–æ...");
    cameraWorker->takePhoto();
}

void CameraWindow::onStartStopVideo()
{
    if (!isRecording) {
        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ...");
        cameraWorker->startVideoRecording();
    } else {
        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...");
        cameraWorker->stopVideoRecording();
    }
}

void CameraWindow::onTogglePreview()
{
    isPreviewEnabled = !isPreviewEnabled;
    
    if (isPreviewEnabled) {
        cameraWorker->startPreview();
        togglePreviewBtn->setText("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–≤—å—é");
        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ü—Ä–µ–≤—å—é –∞–∫—Ç–∏–≤–Ω–æ");
    } else {
        cameraWorker->stopPreview();
        togglePreviewBtn->setText("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ–≤—å—é");
        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ü—Ä–µ–≤—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
        previewLabel->setText("–ü—Ä–µ–≤—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    }
}

void CameraWindow::onVideoRecordingStarted()
{
    isRecording = true;
    isVideoRecording = true;
    updateVideoButtonText();
    recordingBlinkTimer->start(500);
    statusLabel->setText("–°—Ç–∞—Ç—É—Å: ‚è∫ –ó–ê–ü–ò–°–¨ –í–ò–î–ï–û");
    
    // Jake —Ç–∞–Ω—Ü—É–µ—Ç –ø—Ä–∏ –∑–∞–ø–∏—Å–∏!
    jakeWarning->showWarning(JakeCameraWarning::RECORDING_STARTED);
}

void CameraWindow::onVideoRecordingStopped()
{
    isRecording = false;
    isVideoRecording = false;
    updateVideoButtonText();
    recordingBlinkTimer->stop();
    recordingIndicator->clear();
    recordingIndicator->setStyleSheet("QLabel { background-color: transparent; }");
    statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    
    // –°–∫—Ä—ã–≤–∞–µ–º Jake –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    jakeWarning->hideWarning();
}

void CameraWindow::onPhotoSaved(const QString &path)
{
    statusLabel->setText(QString("–°—Ç–∞—Ç—É—Å: ‚úì –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %1").arg(path));
    
    // Jake –ø–æ–¥–º–∏–≥–∏–≤–∞–µ—Ç –ø—Ä–∏ —Ñ–æ—Ç–æ!
    jakeWarning->showWarning(JakeCameraWarning::PHOTO_TAKEN);
    
    QMessageBox::information(this, "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n" + path);
}

void CameraWindow::onError(const QString &error)
{
    statusLabel->setText("–°—Ç–∞—Ç—É—Å: ‚ùå –û—à–∏–±–∫–∞: " + error);
    QMessageBox::critical(this, "–û—à–∏–±–∫–∞", error);
}

void CameraWindow::onCameraInfoReady(const QString &info)
{
    infoTextEdit->setHtml(info);
}

void CameraWindow::onFrameReady(const QImage &frame)
{
    if (frame.isNull()) {
        return;
    }
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    QPixmap pixmap = QPixmap::fromImage(frame);
    QPixmap scaled = pixmap.scaled(previewLabel->size(), Qt::KeepAspectRatio, Qt::SmoothTransformation);
    previewLabel->setPixmap(scaled);
}

void CameraWindow::updateVideoButtonText()
{
    if (isRecording) {
        startStopVideoBtn->setText("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å");
        startStopVideoBtn->setStyleSheet(
            "QPushButton { background-color: #D32F2F; color: white; padding: 10px; border-radius: 4px; font-size: 14px; font-weight: bold; }"
            "QPushButton:hover { background-color: #B71C1C; }"
            "QPushButton:pressed { background-color: #8B0000; }"
        );
    } else {
        startStopVideoBtn->setText("üé• –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ");
        startStopVideoBtn->setStyleSheet(
            "QPushButton { background-color: #FF5722; color: white; padding: 10px; border-radius: 4px; font-size: 14px; font-weight: bold; }"
            "QPushButton:hover { background-color: #E64A19; }"
            "QPushButton:pressed { background-color: #D84315; }"
        );
    }
}

void CameraWindow::setupHotkeys()
{
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ registerGlobalHotkeys()
}

void CameraWindow::registerGlobalHotkeys()
{
    if (globalHotkeysRegistered) {
        return; // –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
    }
    
    HWND hwnd = (HWND)winId();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ Windows
    // MOD_CONTROL | MOD_SHIFT = Ctrl+Shift
    
    // Ctrl+Shift+R - –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
    if (RegisterHotKey(hwnd, HOTKEY_START_RECORDING, MOD_CONTROL | MOD_SHIFT, 'R')) {
        qDebug() << "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: Ctrl+Shift+R (–Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å)";
    } else {
        qDebug() << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Ctrl+Shift+R";
    }
    
    // Ctrl+Shift+S - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    if (RegisterHotKey(hwnd, HOTKEY_STOP_RECORDING, MOD_CONTROL | MOD_SHIFT, 'S')) {
        qDebug() << "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: Ctrl+Shift+S (–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)";
    } else {
        qDebug() << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Ctrl+Shift+S";
    }
    
    // Ctrl+Shift+P - —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ
    if (RegisterHotKey(hwnd, HOTKEY_TAKE_PHOTO, MOD_CONTROL | MOD_SHIFT, 'P')) {
        qDebug() << "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: Ctrl+Shift+P (—Ñ–æ—Ç–æ)";
    } else {
        qDebug() << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Ctrl+Shift+P";
    }
    
    // Ctrl+Shift+Q - –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ
    if (RegisterHotKey(hwnd, HOTKEY_SHOW_WINDOW, MOD_CONTROL | MOD_SHIFT, 'Q')) {
        qDebug() << "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: Ctrl+Shift+Q (–ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ)";
    } else {
        qDebug() << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Ctrl+Shift+Q";
    }
    
    globalHotkeysRegistered = true;
}

void CameraWindow::unregisterGlobalHotkeys()
{
    if (!globalHotkeysRegistered) {
        return;
    }
    
    HWND hwnd = (HWND)winId();
    
    UnregisterHotKey(hwnd, HOTKEY_START_RECORDING);
    UnregisterHotKey(hwnd, HOTKEY_STOP_RECORDING);
    UnregisterHotKey(hwnd, HOTKEY_TAKE_PHOTO);
    UnregisterHotKey(hwnd, HOTKEY_SHOW_WINDOW);
    
    qDebug() << "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã";
    
    globalHotkeysRegistered = false;
}

bool CameraWindow::nativeEvent(const QByteArray &eventType, void *message, long *result)
{
    if (eventType == "windows_generic_MSG") {
        MSG *msg = static_cast<MSG*>(message);
        
        if (msg->message == WM_HOTKEY) {
            int hotkeyId = msg->wParam;
            
            qDebug() << "–ü–æ–ª—É—á–µ–Ω–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞:" << hotkeyId;
            
            switch (hotkeyId) {
                case HOTKEY_START_RECORDING:
                    qDebug() << "Ctrl+Shift+R - –ù–ê–ß–ê–¢–¨ –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ";
                    if (!isRecording && !isVideoRecording) {
                        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ (–≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞)...");
                        cameraWorker->startVideoRecording();
                    } else {
                        qDebug() << "–ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç!";
                    }
                    return true;
                
                case HOTKEY_STOP_RECORDING:
                    qDebug() << "Ctrl+Shift+S - –û–°–¢–ê–ù–û–í–ò–¢–¨ –∑–∞–ø–∏—Å—å";
                    qDebug() << "isRecording:" << isRecording << "isVideoRecording:" << isVideoRecording;
                    // –ù–∞–ø—Ä—è–º—É—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
                    if (isRecording || isVideoRecording) {
                        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ (–≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞)...");
                        cameraWorker->stopVideoRecording();
                    } else {
                        qDebug() << "–ó–∞–ø–∏—Å—å –Ω–µ –∏–¥–µ—Ç!";
                    }
                    return true;
                    
                case HOTKEY_TAKE_PHOTO:
                    qDebug() << "Ctrl+Shift+P - —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ";
                    statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ó–∞—Ö–≤–∞—Ç —Ñ–æ—Ç–æ (–≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞)...");
                    onTakePhoto();
                    return true;
                    
                case HOTKEY_SHOW_WINDOW:
                    qDebug() << "Ctrl+Shift+Q - –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ";
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–∫–Ω–∞
                    if (isRecording || isVideoRecording) {
                        qDebug() << "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–∫–Ω–∞";
                        cameraWorker->stopVideoRecording();
                        // –û–±–Ω–æ–≤–ª—è–µ–º UI
                        isRecording = false;
                        isVideoRecording = false;
                        updateVideoButtonText();
                        recordingBlinkTimer->stop();
                        recordingIndicator->clear();
                        recordingIndicator->setStyleSheet("QLabel { background-color: transparent; }");
                    }
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º Jake
                    jakeWarning->hideWarning();
                    
                    unregisterGlobalHotkeys(); // –û—Ç–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
                    this->show();
                    this->raise();
                    this->activateWindow();
                    statusLabel->setText("–°—Ç–∞—Ç—É—Å: –û–∫–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
                    return true;
            }
        }
    }
    
    return QWidget::nativeEvent(eventType, message, result);
}
