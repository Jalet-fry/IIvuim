#include "camerawindow.h"
#include "cameraworker.h"
#include "jakecamerawarning.h"
#include "lab4_logger.h"
#include <QApplication>
#include <QMessageBox>
#include <QGroupBox>
#include <QSplitter>
#include <QDebug>
#include <QCloseEvent>
#include <QProcess>
#include <QFileInfo>
#include <QStandardPaths>
#include <QFile>
#include <QTextStream>
#include <QDir>
#include <QRadioButton>
#include <windows.h>

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
HHOOK CameraWindow::keyboardHook = nullptr;
CameraWindow* CameraWindow::instance = nullptr;

CameraWindow::CameraWindow(QWidget *parent, QWidget *mainWin)
    : QWidget(parent),
      cameraWorker(nullptr),
      isRecording(false),
      isPreviewEnabled(true),
      recordingIndicatorVisible(false),
      globalHotkeysRegistered(false),
      isStealthMode(false),
      stealthPhotoMode(true),
      stealthTimer(nullptr),
      mainWindow(mainWin),
      stealthWindow(nullptr)
{
    setWindowTitle("–õ–† 4: –†–∞–±–æ—Ç–∞ —Å –≤–µ–±-–∫–∞–º–µ—Ä–æ–π (DirectShow API)");
    resize(1000, 700);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
    Lab4Logger::instance()->logSystemEvent("CameraWindow constructor started");
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —É–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—É–∫–∞
    instance = this;
    
    setupUI();
    
    // –°–æ–∑–¥–∞–µ–º worker –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–º–µ—Ä–æ–π
    cameraWorker = new CameraWorker();
    Lab4Logger::instance()->logCameraEvent("CameraWorker created");
    
    // –°–æ–∑–¥–∞–µ–º Jake –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    jakeWarning = new JakeCameraWarning(this);
    Lab4Logger::instance()->logJakeEvent("JakeCameraWarning created");
    
    
    // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
    connect(cameraWorker, &CameraWorker::videoRecordingStarted, this, &CameraWindow::onVideoRecordingStarted);
    connect(cameraWorker, &CameraWorker::videoRecordingStopped, this, &CameraWindow::onVideoRecordingStopped);
    connect(cameraWorker, &CameraWorker::photoSaved, this, &CameraWindow::onPhotoSaved);
    connect(cameraWorker, &CameraWorker::errorOccurred, this, &CameraWindow::onError);
    connect(cameraWorker, &CameraWorker::cameraInfoReady, this, &CameraWindow::onCameraInfoReady);
    connect(cameraWorker, &CameraWorker::frameReady, this, &CameraWindow::onFrameReady);
    
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    setupHotkeys();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    isRecording = false;
    isPreviewEnabled = false;
    isVideoRecording = false;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    initializeForbiddenWordsSystem();
    
    // –¢–∞–π–º–µ—Ä –¥–ª—è –º–∏–≥–∞—é—â–µ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–ø–∏—Å–∏
    recordingBlinkTimer = new QTimer(this);
    connect(recordingBlinkTimer, &QTimer::timeout, this, [this]() {
        recordingIndicatorVisible = !recordingIndicatorVisible;
        if (recordingIndicatorVisible) {
            recordingIndicator->setStyleSheet("QLabel { background-color: red; color: white; padding: 5px; border-radius: 3px; font-weight: bold; }");
            recordingIndicator->setText("‚óè REC");
        } else {
            recordingIndicator->setStyleSheet("QLabel { background-color: transparent; color: transparent; padding: 5px; }");
            recordingIndicator->setText("      ");
        }
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–≤—å—é
    if (cameraWorker->isInitialized()) {
        cameraWorker->startPreview();
        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ü—Ä–µ–≤—å—é –∞–∫—Ç–∏–≤–Ω–æ (DirectShow API)");
        
        // Jake –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã
        QTimer::singleShot(500, this, [this]() {
            jakeWarning->showWarning(JakeCameraWarning::CAMERA_STARTED);
        });
    } else {
        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ - –∫–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }
}

CameraWindow::~CameraWindow()
{
    qDebug() << "CameraWindow destructor called";
    
    // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
    unregisterGlobalHotkeys();
    
    if (cameraWorker) {
        qDebug() << "Stopping camera worker...";
        cameraWorker->stopAll();
        delete cameraWorker;
        cameraWorker = nullptr;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º
    if (isStealthMode) {
        qDebug() << "Stopping stealth mode in destructor...";
        stopStealthMode();
    } else {
        // –ï—Å–ª–∏ —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ
        disableStealthQuitBehavior();
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    stopForbiddenWordsMonitoring();
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —É–∫–∞–∑–∞—Ç–µ–ª—å
    if (instance == this) {
        instance = nullptr;
    }
    
    qDebug() << "CameraWindow destroyed";
}

void CameraWindow::closeEvent(QCloseEvent *event)
{
    qDebug() << "=== CAMERA WINDOW CLOSE EVENT ===";
    Lab4Logger::instance()->logStealthModeEvent("CameraWindow closeEvent called");
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –∏–¥–µ—Ç
    if (isRecording || isVideoRecording) {
        qDebug() << "Stopping recording on close...";
        cameraWorker->stopVideoRecording();
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –∫–∞–º–µ—Ä—É
    if (cameraWorker) {
        qDebug() << "Stopping all camera operations...";
        cameraWorker->stopAll();
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º Jake
    if (jakeWarning) {
        jakeWarning->hideWarning();
    }
    
    // –û—Ç–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    unregisterGlobalHotkeys();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    disableStealthQuitBehavior();
    
    qDebug() << "CameraWindow closing properly";
    
    event->accept();
}

void CameraWindow::setupUI()
{
    QVBoxLayout *mainLayout = new QVBoxLayout(this);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    QLabel *titleLabel = new QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-–∫–∞–º–µ—Ä–æ–π (DirectShow API - Windows –Ω–∞—Ç–∏–≤–Ω—ã–π)");
    titleLabel->setAlignment(Qt::AlignCenter);
    titleLabel->setStyleSheet(
        "QLabel { font-size: 20px; font-weight: bold; color: #1976D2; padding: 10px; }"
    );
    mainLayout->addWidget(titleLabel);
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Å–ø–ª–∏—Ç—Ç–µ—Ä —Å –ø—Ä–µ–≤—å—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    QSplitter *splitter = new QSplitter(Qt::Horizontal);
    
    // –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ø—Ä–µ–≤—å—é –∫–∞–º–µ—Ä—ã
    QWidget *previewWidget = new QWidget();
    QVBoxLayout *previewLayout = new QVBoxLayout(previewWidget);
    
    QGroupBox *previewGroup = new QGroupBox("–ü—Ä–µ–≤—å—é –∫–∞–º–µ—Ä—ã");
    QVBoxLayout *previewGroupLayout = new QVBoxLayout(previewGroup);
    
    // QLabel –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
    previewLabel = new QLabel("–û–∂–∏–¥–∞–Ω–∏–µ –∫–∞–¥—Ä–æ–≤...");
    previewLabel->setMinimumSize(640, 480);
    previewLabel->setAlignment(Qt::AlignCenter);
    previewLabel->setStyleSheet("QLabel { background-color: #000000; border: 2px solid #1976D2; color: white; }");
    previewLabel->setScaledContents(false); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
    previewGroupLayout->addWidget(previewLabel);
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
    recordingIndicator = new QLabel("");
    recordingIndicator->setAlignment(Qt::AlignCenter);
    recordingIndicator->setStyleSheet("QLabel { background-color: transparent; }");
    recordingIndicator->setFixedHeight(30);
    previewGroupLayout->addWidget(recordingIndicator);
    
    previewLayout->addWidget(previewGroup);
    splitter->addWidget(previewWidget);
    
    // –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    QWidget *controlWidget = new QWidget();
    QVBoxLayout *controlLayout = new QVBoxLayout(controlWidget);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–µ—Ä–µ
    QGroupBox *infoGroup = new QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–µ—Ä–µ");
    QVBoxLayout *infoLayout = new QVBoxLayout(infoGroup);
    
    infoTextEdit = new QTextEdit();
    infoTextEdit->setReadOnly(true);
    infoTextEdit->setMaximumHeight(150);
    infoTextEdit->setPlaceholderText("–ù–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä—ã");
    infoLayout->addWidget(infoTextEdit);
    
    getCameraInfoBtn = new QPushButton("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–µ—Ä–µ");
    getCameraInfoBtn->setStyleSheet(
        "QPushButton { background-color: #4CAF50; color: white; padding: 8px; border-radius: 4px; font-weight: bold; }"
        "QPushButton:hover { background-color: #45a049; }"
        "QPushButton:pressed { background-color: #3d8b40; }"
    );
    connect(getCameraInfoBtn, &QPushButton::clicked, this, &CameraWindow::onGetCameraInfo);
    infoLayout->addWidget(getCameraInfoBtn);
    
    controlLayout->addWidget(infoGroup);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    QGroupBox *controlGroup = new QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");
    QVBoxLayout *controlGroupLayout = new QVBoxLayout(controlGroup);
    
    takePhotoBtn = new QPushButton("üì∑ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ");
    takePhotoBtn->setStyleSheet(
        "QPushButton { background-color: #2196F3; color: white; padding: 10px; border-radius: 4px; font-size: 14px; font-weight: bold; }"
        "QPushButton:hover { background-color: #1976D2; }"
        "QPushButton:pressed { background-color: #0D47A1; }"
    );
    connect(takePhotoBtn, &QPushButton::clicked, this, &CameraWindow::onTakePhoto);
    controlGroupLayout->addWidget(takePhotoBtn);
    
    startStopVideoBtn = new QPushButton("üé• –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ");
    startStopVideoBtn->setStyleSheet(
        "QPushButton { background-color: #FF5722; color: white; padding: 10px; border-radius: 4px; font-size: 14px; font-weight: bold; }"
        "QPushButton:hover { background-color: #E64A19; }"
        "QPushButton:pressed { background-color: #D84315; }"
    );
    connect(startStopVideoBtn, &QPushButton::clicked, this, &CameraWindow::onStartStopVideo);
    controlGroupLayout->addWidget(startStopVideoBtn);
    
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ –≤–∏–¥–µ–æ
    QLabel *videoNote = new QLabel("‚ÑπÔ∏è –í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (—Å–µ—Ä–∏—è –∫–∞–¥—Ä–æ–≤)");
    videoNote->setStyleSheet("QLabel { color: #666; font-size: 10px; padding: 2px; }");
    videoNote->setWordWrap(true);
    controlGroupLayout->addWidget(videoNote);
    
    togglePreviewBtn = new QPushButton("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–≤—å—é");
    togglePreviewBtn->setStyleSheet(
        "QPushButton { background-color: #FF9800; color: white; padding: 8px; border-radius: 4px; font-weight: bold; }"
        "QPushButton:hover { background-color: #F57C00; }"
        "QPushButton:pressed { background-color: #E65100; }"
    );
    connect(togglePreviewBtn, &QPushButton::clicked, this, &CameraWindow::onTogglePreview);
    controlGroupLayout->addWidget(togglePreviewBtn);
    
    controlLayout->addWidget(controlGroup);
    
    // –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º
    QGroupBox *stealthGroup = new QGroupBox("üïµÔ∏è –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º");
    QVBoxLayout *stealthLayout = new QVBoxLayout(stealthGroup);
    
    // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Å–∫—Ä—ã—Ç–æ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    QHBoxLayout *modeLayout = new QHBoxLayout();
    
    QRadioButton *photoModeRadio = new QRadioButton("üì∏ –°–∫—Ä—ã—Ç–æ–µ —Ñ–æ—Ç–æ");
    photoModeRadio->setChecked(true);
    photoModeRadio->setStyleSheet("QRadioButton { font-weight: bold; }");
    
    QRadioButton *videoModeRadio = new QRadioButton("üé• –°–∫—Ä—ã—Ç–æ–µ –≤–∏–¥–µ–æ");
    videoModeRadio->setStyleSheet("QRadioButton { font-weight: bold; }");
    
    modeLayout->addWidget(photoModeRadio);
    modeLayout->addWidget(videoModeRadio);
    modeLayout->addStretch();
    
    stealthLayout->addLayout(modeLayout);
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞
    QPushButton *startStealthBtn = new QPushButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º");
    startStealthBtn->setStyleSheet(
        "QPushButton { background-color: #E91E63; color: white; padding: 12px; border-radius: 6px; font-weight: bold; font-size: 14px; }"
        "QPushButton:hover { background-color: #C2185B; }"
        "QPushButton:pressed { background-color: #AD1457; }"
    );
    
    connect(startStealthBtn, &QPushButton::clicked, this, [this, photoModeRadio, videoModeRadio]() {
        bool isPhotoMode = photoModeRadio->isChecked();
        startStealthMode(isPhotoMode);
    });
    
    stealthLayout->addWidget(startStealthBtn);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ
    QLabel *stealthInfo = new QLabel(
        "‚ö†Ô∏è –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º:\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ\n"
        "‚Ä¢ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:\n"
        "  - Ctrl+Shift+Q: –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–∞\n"
        "  - Ctrl+Shift+E: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º\n"
        "  - Ctrl+Shift+X: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ\n\n"
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö!"
    );
    stealthInfo->setStyleSheet("QLabel { color: #666; font-size: 11px; padding: 8px; background-color: #FFF3E0; border-radius: 4px; }");
    stealthInfo->setWordWrap(true);
    stealthLayout->addWidget(stealthInfo);
    
    controlLayout->addWidget(stealthGroup);
    
    // –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    QGroupBox *forbiddenWordsGroup = new QGroupBox("üö´ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤");
    QVBoxLayout *forbiddenWordsLayout = new QVBoxLayout(forbiddenWordsGroup);
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    QLabel *monitoringStatusLabel = new QLabel("üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –í–´–ö–õ–Æ–ß–ï–ù");
    monitoringStatusLabel->setStyleSheet(
        "QLabel { "
        "  background-color: #FFCDD2; "
        "  color: #D32F2F; "
        "  padding: 8px; "
        "  border-radius: 4px; "
        "  border: 2px solid #F44336; "
        "  font-weight: bold; "
        "  font-size: 12px; "
        "}"
    );
    forbiddenWordsLayout->addWidget(monitoringStatusLabel);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    this->monitoringStatusLabel = monitoringStatusLabel;
    
    QPushButton *startMonitoringBtn = new QPushButton("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ–≤");
    startMonitoringBtn->setStyleSheet(
        "QPushButton { background-color: #9C27B0; color: white; padding: 10px; border-radius: 6px; font-weight: bold; }"
        "QPushButton:hover { background-color: #7B1FA2; }"
        "QPushButton:pressed { background-color: #6A1B9A; }"
    );
    connect(startMonitoringBtn, &QPushButton::clicked, this, &CameraWindow::startForbiddenWordsMonitoring);
    forbiddenWordsLayout->addWidget(startMonitoringBtn);
    
    QPushButton *stopMonitoringBtn = new QPushButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥");
    stopMonitoringBtn->setStyleSheet(
        "QPushButton { background-color: #F44336; color: white; padding: 10px; border-radius: 6px; font-weight: bold; }"
        "QPushButton:hover { background-color: #D32F2F; }"
        "QPushButton:pressed { background-color: #B71C1C; }"
    );
    connect(stopMonitoringBtn, &QPushButton::clicked, this, &CameraWindow::stopForbiddenWordsMonitoring);
    forbiddenWordsLayout->addWidget(stopMonitoringBtn);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    QLabel *forbiddenWordsInfo = new QLabel(
        "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:\n"
        "‚Ä¢ –†–ï–ê–õ–¨–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä—è–¥\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: sex, gun, drug, lgbt, violence, hate, kill, death, suicide, bomb, terror, weapon\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é 009.gif –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"
        "‚Ä¢ –ë—É—Ñ–µ—Ä —Ç–µ–∫—Å—Ç–∞: 1000 —Å–∏–º–≤–æ–ª–æ–≤, –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫"
    );
    forbiddenWordsInfo->setStyleSheet("QLabel { color: #666; font-size: 10px; padding: 8px; background-color: #FFF3E0; border-radius: 4px; }");
    forbiddenWordsInfo->setWordWrap(true);
    forbiddenWordsLayout->addWidget(forbiddenWordsInfo);
    
    controlLayout->addWidget(forbiddenWordsGroup);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (–≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç)
    
    // –°—Ç–∞—Ç—É—Å
    statusLabel = new QLabel("–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤");
    statusLabel->setStyleSheet(
        "QLabel { background-color: #E3F2FD; padding: 10px; border-radius: 4px; border: 1px solid #1976D2; }"
    );
    statusLabel->setWordWrap(true);
    controlLayout->addWidget(statusLabel);
    
    controlLayout->addStretch();
    
    splitter->addWidget(controlWidget);
    splitter->setStretchFactor(0, 2);
    splitter->setStretchFactor(1, 1);
    
    mainLayout->addWidget(splitter);
}

void CameraWindow::onGetCameraInfo()
{
    infoTextEdit->setText("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–µ—Ä–µ...");
    cameraWorker->getCameraInfo();
}

void CameraWindow::onTakePhoto()
{
    statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ó–∞—Ö–≤–∞—Ç —Ñ–æ—Ç–æ...");
    cameraWorker->takePhoto();
}

void CameraWindow::onStartStopVideo()
{
    if (!isRecording) {
        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ...");
        cameraWorker->startVideoRecording();
    } else {
        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...");
        cameraWorker->stopVideoRecording();
    }
}

void CameraWindow::onTogglePreview()
{
    isPreviewEnabled = !isPreviewEnabled;
    
    if (isPreviewEnabled) {
        cameraWorker->startPreview();
        togglePreviewBtn->setText("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–≤—å—é");
        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ü—Ä–µ–≤—å—é –∞–∫—Ç–∏–≤–Ω–æ");
    } else {
        cameraWorker->stopPreview();
        togglePreviewBtn->setText("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ–≤—å—é");
        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ü—Ä–µ–≤—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
        previewLabel->setText("–ü—Ä–µ–≤—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    }
}

void CameraWindow::onVideoRecordingStarted()
{
    isRecording = true;
    isVideoRecording = true;
    updateVideoButtonText();
    recordingBlinkTimer->start(500);
    statusLabel->setText("–°—Ç–∞—Ç—É—Å: ‚è∫ –ó–ê–ü–ò–°–¨ –í–ò–î–ï–û");
    
    // Jake —Ç–∞–Ω—Ü—É–µ—Ç –ø—Ä–∏ –∑–∞–ø–∏—Å–∏!
    jakeWarning->showWarning(JakeCameraWarning::RECORDING_STARTED);
}

void CameraWindow::onVideoRecordingStopped()
{
    isRecording = false;
    isVideoRecording = false;
    updateVideoButtonText();
    recordingBlinkTimer->stop();
    recordingIndicator->clear();
    recordingIndicator->setStyleSheet("QLabel { background-color: transparent; }");
    statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    
    // –°–∫—Ä—ã–≤–∞–µ–º Jake –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    jakeWarning->hideWarning();
}

void CameraWindow::onPhotoSaved(const QString &path)
{
    Lab4Logger::instance()->logCameraEvent(QString("Photo saved: %1").arg(path));
    Lab4Logger::instance()->logFileEvent(QString("Photo file created: %1").arg(path));
    
    statusLabel->setText(QString("–°—Ç–∞—Ç—É—Å: ‚úì –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %1").arg(path));
    
    // Jake –ø–æ–¥–º–∏–≥–∏–≤–∞–µ—Ç –ø—Ä–∏ —Ñ–æ—Ç–æ!
    jakeWarning->showWarning(JakeCameraWarning::PHOTO_TAKEN);
    Lab4Logger::instance()->logJakeEvent("Jake showed PHOTO_TAKEN warning");
    
    QMessageBox::information(this, "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n" + path);
    Lab4Logger::instance()->logUIEvent("Photo saved message box shown");
}

void CameraWindow::onError(const QString &error)
{
    statusLabel->setText("–°—Ç–∞—Ç—É—Å: ‚ùå –û—à–∏–±–∫–∞: " + error);
    QMessageBox::critical(this, "–û—à–∏–±–∫–∞", error);
}

void CameraWindow::onCameraInfoReady(const QString &info)
{
    infoTextEdit->setHtml(info);
}

void CameraWindow::onFrameReady(const QImage &frame)
{
    if (frame.isNull()) {
        return;
    }
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    QPixmap pixmap = QPixmap::fromImage(frame);
    QPixmap scaled = pixmap.scaled(previewLabel->size(), Qt::KeepAspectRatio, Qt::SmoothTransformation);
    previewLabel->setPixmap(scaled);
}

void CameraWindow::updateVideoButtonText()
{
    if (isRecording) {
        startStopVideoBtn->setText("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å");
        startStopVideoBtn->setStyleSheet(
            "QPushButton { background-color: #D32F2F; color: white; padding: 10px; border-radius: 4px; font-size: 14px; font-weight: bold; }"
            "QPushButton:hover { background-color: #B71C1C; }"
            "QPushButton:pressed { background-color: #8B0000; }"
        );
    } else {
        startStopVideoBtn->setText("üé• –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ");
        startStopVideoBtn->setStyleSheet(
            "QPushButton { background-color: #FF5722; color: white; padding: 10px; border-radius: 4px; font-size: 14px; font-weight: bold; }"
            "QPushButton:hover { background-color: #E64A19; }"
            "QPushButton:pressed { background-color: #D84315; }"
        );
    }
}

void CameraWindow::setupHotkeys()
{
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ registerGlobalHotkeys()
}

void CameraWindow::registerGlobalHotkeys()
{
    if (globalHotkeysRegistered) {
        return; // –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
    }
    
    HWND hwnd = (HWND)winId();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ Windows
    // MOD_CONTROL | MOD_SHIFT = Ctrl+Shift
    
    // Ctrl+Shift+R - –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
    if (RegisterHotKey(hwnd, HOTKEY_START_RECORDING, MOD_CONTROL | MOD_SHIFT, 'R')) {
        qDebug() << "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: Ctrl+Shift+R (–Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å)";
    } else {
        qDebug() << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Ctrl+Shift+R";
    }
    
    // Ctrl+Shift+S - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    if (RegisterHotKey(hwnd, HOTKEY_STOP_RECORDING, MOD_CONTROL | MOD_SHIFT, 'S')) {
        qDebug() << "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: Ctrl+Shift+S (–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)";
    } else {
        qDebug() << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Ctrl+Shift+S";
    }
    
    // Ctrl+Shift+P - —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ
    if (RegisterHotKey(hwnd, HOTKEY_TAKE_PHOTO, MOD_CONTROL | MOD_SHIFT, 'P')) {
        qDebug() << "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: Ctrl+Shift+P (—Ñ–æ—Ç–æ)";
    } else {
        qDebug() << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Ctrl+Shift+P";
    }
    
    // Ctrl+Shift+Q - –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ
    if (RegisterHotKey(hwnd, HOTKEY_SHOW_WINDOW, MOD_CONTROL | MOD_SHIFT, 'Q')) {
        qDebug() << "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: Ctrl+Shift+Q (–ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ)";
    } else {
        qDebug() << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Ctrl+Shift+Q";
    }
    
    globalHotkeysRegistered = true;
}

void CameraWindow::unregisterGlobalHotkeys()
{
    if (!globalHotkeysRegistered) {
        return;
    }
    
    HWND hwnd = (HWND)winId();
    
    UnregisterHotKey(hwnd, HOTKEY_START_RECORDING);
    UnregisterHotKey(hwnd, HOTKEY_STOP_RECORDING);
    UnregisterHotKey(hwnd, HOTKEY_TAKE_PHOTO);
    UnregisterHotKey(hwnd, HOTKEY_SHOW_WINDOW);
    
    qDebug() << "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã";
    
    globalHotkeysRegistered = false;
}


bool CameraWindow::nativeEvent(const QByteArray &eventType, void *message, long *result)
{
    if (eventType == "windows_generic_MSG") {
        MSG *msg = static_cast<MSG*>(message);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        if (isMonitoringForbiddenWords && (msg->message == WM_KEYDOWN || msg->message == WM_SYSKEYDOWN)) {
            int keyCode = msg->wParam;
            bool isShift = (GetKeyState(VK_SHIFT) & 0x8000) != 0;
            bool isCtrl = (GetKeyState(VK_CONTROL) & 0x8000) != 0;
            bool isAlt = (GetKeyState(VK_MENU) & 0x8000) != 0;
            
            processKeyPress(keyCode, isShift, isCtrl, isAlt);
        }
        
        if (msg->message == WM_HOTKEY) {
            int hotkeyId = msg->wParam;
            
            qDebug() << "–ü–æ–ª—É—á–µ–Ω–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞:" << hotkeyId;
            
            switch (hotkeyId) {
                case HOTKEY_START_RECORDING:
                    qDebug() << "Ctrl+Shift+R - –ù–ê–ß–ê–¢–¨ –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ";
                    if (!isRecording && !isVideoRecording) {
                        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ (–≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞)...");
                        cameraWorker->startVideoRecording();
                    } else {
                        qDebug() << "–ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç!";
                    }
                    return true;
                
                case HOTKEY_STOP_RECORDING:
                    qDebug() << "Ctrl+Shift+S - –û–°–¢–ê–ù–û–í–ò–¢–¨ –∑–∞–ø–∏—Å—å";
                    qDebug() << "isRecording:" << isRecording << "isVideoRecording:" << isVideoRecording;
                    // –ù–∞–ø—Ä—è–º—É—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
                    if (isRecording || isVideoRecording) {
                        statusLabel->setText("–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ (–≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞)...");
                        cameraWorker->stopVideoRecording();
                    } else {
                        qDebug() << "–ó–∞–ø–∏—Å—å –Ω–µ –∏–¥–µ—Ç!";
                    }
                    return true;
                    
                case HOTKEY_TAKE_PHOTO:
                    qDebug() << "Ctrl+Shift+P - —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ";
                    statusLabel->setText("–°—Ç–∞—Ç—É—Å: –ó–∞—Ö–≤–∞—Ç —Ñ–æ—Ç–æ (–≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞)...");
                    onTakePhoto();
                    return true;
                    
                case HOTKEY_SHOW_WINDOW:
                    qDebug() << "Ctrl+Shift+Q - –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ";
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–∫–Ω–∞
                    if (isRecording || isVideoRecording) {
                        qDebug() << "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–∫–Ω–∞";
                        cameraWorker->stopVideoRecording();
                        // –û–±–Ω–æ–≤–ª—è–µ–º UI
                        isRecording = false;
                        isVideoRecording = false;
                        updateVideoButtonText();
                        recordingBlinkTimer->stop();
                        recordingIndicator->clear();
                        recordingIndicator->setStyleSheet("QLabel { background-color: transparent; }");
                    }
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º Jake
                    jakeWarning->hideWarning();
                    
                    unregisterGlobalHotkeys(); // –û—Ç–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
                    this->show();
                    this->raise();
                    this->activateWindow();
                    
                    if (mainWindow) {
                        mainWindow->show();
                        mainWindow->raise();
                        mainWindow->activateWindow();
                    }
                    
                    // –ï—Å–ª–∏ –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
                    if (isStealthMode) {
                        stopStealthMode();
                    }
                    
                    statusLabel->setText("–°—Ç–∞—Ç—É—Å: –û–∫–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
                    return true;
                    
                case HOTKEY_STOP_STEALTH:
                    qDebug() << "Ctrl+Shift+E - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º";
                    if (isStealthMode) {
                        stopStealthMode();
                    }
                    return true;
                    
                case HOTKEY_FORCE_QUIT:
                    qDebug() << "Ctrl+Shift+X - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è";
                    forceQuitApplication();
                    return true;
            }
        }
    }
    
    return QWidget::nativeEvent(eventType, message, result);
}

// –ú–µ—Ç–æ–¥—ã —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞
void CameraWindow::startStealthMode(bool photoMode)
{
    qDebug() << "=== START STEALTH MODE ===";
    Lab4Logger::instance()->logStealthModeEvent("Starting stealth mode");
    
    if (isStealthMode) {
        qDebug() << "Stealth mode already active!";
        QMessageBox::information(this, "–°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º", "–°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!");
        return;
    }
    
    qDebug() << "Setting stealth mode parameters...";
    stealthPhotoMode = photoMode;
    isStealthMode = true;
    
    // –í–∫–ª—é—á–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞
    enableStealthQuitBehavior();
    
    qDebug() << "Hiding windows...";
    Lab4Logger::instance()->logStealthModeEvent("Hiding windows");
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º–æ–µ –æ–∫–Ω–æ-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    qDebug() << "Creating stealth window...";
    createStealthWindow();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–≤–∏–¥–∏–º–æ–µ –æ–∫–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –≤–∏–¥–∏–º–æ
    if (stealthWindow && stealthWindow->isVisible()) {
        qDebug() << "Stealth window successfully created and visible";
        Lab4Logger::instance()->logStealthModeEvent("Stealth window created successfully");
    } else {
        qDebug() << "ERROR: Stealth window not created or not visible!";
        qDebug() << "Stealth window pointer:" << stealthWindow;
        if (stealthWindow) {
            qDebug() << "Stealth window visible:" << stealthWindow->isVisible();
        }
        Lab4Logger::instance()->logStealthModeEvent("ERROR: Stealth window creation failed");
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ-–∑–∞–≥–ª—É—à–∫—É, –æ—Ç–º–µ–Ω—è–µ–º —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º
        isStealthMode = false;
        QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–µ–≤–∏–¥–∏–º–æ–µ –æ–∫–Ω–æ-–∑–∞–≥–ª—É—à–∫—É!\n–°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –æ—Ç–º–µ–Ω–µ–Ω.");
        return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–∫–Ω–∞
    this->hide();
    if (mainWindow) {
        mainWindow->hide();
        qDebug() << "Main window hidden";
    }
    qDebug() << "Camera window hidden";
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞
    qDebug() << "Registering stealth hotkeys...";
    RegisterHotKey((HWND)this->winId(), HOTKEY_SHOW_WINDOW, MOD_CONTROL | MOD_SHIFT, 'Q');
    RegisterHotKey((HWND)this->winId(), HOTKEY_STOP_STEALTH, MOD_CONTROL | MOD_SHIFT, 'E');
    RegisterHotKey((HWND)this->winId(), HOTKEY_FORCE_QUIT, MOD_CONTROL | MOD_SHIFT, 'X');
    qDebug() << "Stealth hotkeys registered";
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
    qDebug() << "Creating stealth timer...";
    stealthTimer = new QTimer(this);
    connect(stealthTimer, &QTimer::timeout, this, &CameraWindow::onStealthTimer);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)
    stealthTimer->start(5000);
    qDebug() << "Stealth timer started (5 seconds interval)";
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç –î–∂–µ–π–∫–∞
    qDebug() << "Showing stealth warning...";
    showStealthWarning();
    
    statusLabel->setText(QString("–°—Ç–∞—Ç—É—Å: üïµÔ∏è –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω (%1)").arg(photoMode ? "—Ñ–æ—Ç–æ" : "–≤–∏–¥–µ–æ"));
    
    Lab4Logger::instance()->logStealthDaemonEvent(QString("Stealth mode started: %1").arg(photoMode ? "photo" : "video"));
    
    qDebug() << "Showing stealth mode information dialog...";
    QMessageBox::information(this, "–°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º", 
        QString("üïµÔ∏è –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω!\n\n"
               "–†–µ–∂–∏–º: %1\n"
               "‚Ä¢ –í—Å–µ –æ–∫–Ω–∞ —Å–∫—Ä—ã—Ç—ã\n"
               "‚Ä¢ –ó–∞—Ö–≤–∞—Ç –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥\n"
               "‚Ä¢ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:\n"
               "  - Ctrl+Shift+Q: –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–∞\n"
               "  - Ctrl+Shift+E: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º\n\n"
               "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö!")
        .arg(photoMode ? "–°–∫—Ä—ã—Ç–æ–µ —Ñ–æ—Ç–æ" : "–°–∫—Ä—ã—Ç–æ–µ –≤–∏–¥–µ–æ"));
    
    qDebug() << "=== STEALTH MODE STARTED SUCCESSFULLY ===";
    Lab4Logger::instance()->logStealthModeEvent("Stealth mode started successfully");
}

void CameraWindow::stopStealthMode()
{
    qDebug() << "=== STOP STEALTH MODE ===";
    Lab4Logger::instance()->logStealthModeEvent("Stopping stealth mode");
    
    if (!isStealthMode) {
        qDebug() << "Stealth mode not active, nothing to stop";
        return;
    }
    
    isStealthMode = false;
    qDebug() << "Stealth mode stopped, app quit allowed";
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞
    disableStealthQuitBehavior();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (stealthTimer) {
        stealthTimer->stop();
        stealthTimer->deleteLater();
        stealthTimer = nullptr;
    }
    
    // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞
    UnregisterHotKey((HWND)this->winId(), HOTKEY_SHOW_WINDOW);
    UnregisterHotKey((HWND)this->winId(), HOTKEY_STOP_STEALTH);
    UnregisterHotKey((HWND)this->winId(), HOTKEY_FORCE_QUIT);
    
    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –Ω–µ–≤–∏–¥–∏–º–æ–µ –æ–∫–Ω–æ-–∑–∞–≥–ª—É—à–∫—É
    qDebug() << "Destroying stealth window...";
    destroyStealthWindow();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–∞
    this->show();
    this->raise();
    this->activateWindow();
    
    if (mainWindow) {
        mainWindow->show();
        mainWindow->raise();
        mainWindow->activateWindow();
    }
    
    statusLabel->setText("–°—Ç–∞—Ç—É—Å: –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    
    Lab4Logger::instance()->logStealthDaemonEvent("Stealth mode stopped");
    
    QMessageBox::information(this, "–°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º", "–°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
}

void CameraWindow::onStealthTimer()
{
    if (!isStealthMode) {
        return;
    }
    
    if (stealthPhotoMode) {
        // –°–∫—Ä—ã—Ç–æ–µ —Ñ–æ—Ç–æ
        statusLabel->setText("–°—Ç–∞—Ç—É—Å: üïµÔ∏è –°–∫—Ä—ã—Ç–æ–µ —Ñ–æ—Ç–æ...");
        cameraWorker->takePhoto();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç –î–∂–µ–π–∫–∞
        showStealthWarning();
        
        Lab4Logger::instance()->logStealthDaemonEvent("Stealth photo taken");
    } else {
        // –°–∫—Ä—ã—Ç–æ–µ –≤–∏–¥–µ–æ (–∫–æ—Ä–æ—Ç–∫–æ–µ - 3 —Å–µ–∫—É–Ω–¥—ã)
        if (!isRecording) {
            statusLabel->setText("–°—Ç–∞—Ç—É—Å: üïµÔ∏è –°–∫—Ä—ã—Ç–æ–µ –≤–∏–¥–µ–æ...");
            cameraWorker->startVideoRecording();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç –î–∂–µ–π–∫–∞
            showStealthWarning();
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            QTimer::singleShot(3000, this, [this]() {
                if (isRecording) {
                    cameraWorker->stopVideoRecording();
                }
            });
            
            Lab4Logger::instance()->logStealthDaemonEvent("Stealth video recorded");
        }
    }
}

void CameraWindow::showStealthWarning()
{
    if (jakeWarning) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç –î–∂–µ–π–∫–∞ –æ —Å–∫—Ä—ã—Ç–æ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–∏
        jakeWarning->showWarning(JakeCameraWarning::STEALTH_MODE);
    }
}

void CameraWindow::createStealthWindow()
{
    qDebug() << "Creating stealth window...";
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º–æ–µ –æ–∫–Ω–æ-–∑–∞–≥–ª—É—à–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏ –¥–ª—è Qt 5.5.1
    stealthWindow = new QWidget();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∫–Ω–∞ –¥–ª—è –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    stealthWindow->setWindowFlags(
        Qt::Tool | 
        Qt::FramelessWindowHint | 
        Qt::WindowStaysOnTopHint |
        Qt::WindowDoesNotAcceptFocus
    );
    
    // –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
    stealthWindow->setAttribute(Qt::WA_TranslucentBackground, true);
    stealthWindow->setAttribute(Qt::WA_NoSystemBackground, true);
    stealthWindow->setAttribute(Qt::WA_ShowWithoutActivating, true);
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—è –∑–∞ —ç–∫—Ä–∞–Ω–æ–º
    stealthWindow->setFixedSize(1, 1);
    stealthWindow->move(-1000, -1000);
    stealthWindow->setWindowTitle("Stealth Window");
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –≤–∏–¥–∏–º—ã–º –¥–ª—è Qt, –Ω–æ –Ω–µ–≤–∏–¥–∏–º—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stealthWindow->setVisible(true);
    stealthWindow->show();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–∫–Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
    stealthWindow->raise();
    
    qDebug() << "Stealth window created and shown";
    qDebug() << "Stealth window is visible:" << stealthWindow->isVisible();
    qDebug() << "Stealth window geometry:" << stealthWindow->geometry();
    qDebug() << "Stealth window windowFlags:" << stealthWindow->windowFlags();
}

void CameraWindow::destroyStealthWindow()
{
    qDebug() << "Destroying stealth window...";
    
    if (stealthWindow) {
        // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        stealthWindow->hide();
        stealthWindow->setVisible(false);
        
        // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –µ–≥–æ
        stealthWindow->deleteLater();
        stealthWindow = nullptr;
        
        qDebug() << "Stealth window destroyed";
    } else {
        qDebug() << "No stealth window to destroy";
    }
}

void CameraWindow::forceQuitApplication()
{
    qDebug() << "=== FORCE QUIT APPLICATION ===";
    Lab4Logger::instance()->logStealthModeEvent("Force quit application requested");
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º
    if (isStealthMode) {
        stopStealthMode();
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
    if (cameraWorker) {
        cameraWorker->stopAll();
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    qDebug() << "Forcing application quit...";
    QCoreApplication::quit();
}

void CameraWindow::enableStealthQuitBehavior()
{
    qDebug() << "Enabling stealth quit behavior";
    Lab4Logger::instance()->logStealthModeEvent("Enabling stealth quit behavior");
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤—Å–µ—Ö –æ–∫–æ–Ω
    // –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ Qt 5.5.1
    QApplication::setQuitOnLastWindowClosed(false);
    qDebug() << "setQuitOnLastWindowClosed(false) enabled for stealth mode";
}

void CameraWindow::disableStealthQuitBehavior()
{
    qDebug() << "Disabling stealth quit behavior";
    Lab4Logger::instance()->logStealthModeEvent("Disabling stealth quit behavior");
    
    // –í–∫–ª—é—á–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    QApplication::setQuitOnLastWindowClosed(true);
    qDebug() << "setQuitOnLastWindowClosed(true) enabled for normal operation";
}

// –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
void CameraWindow::initializeForbiddenWordsSystem()
{
    qDebug() << "Initializing forbidden words system";
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    forbiddenWords << "sex" << "gun" << "drug" << "lgbt" << "violence" << "hate" 
                   << "kill" << "death" << "suicide" << "bomb" << "terror" << "weapon";
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    currentText = "";
    textBuffer = "";
    isMonitoringForbiddenWords = false;
    maxBufferSize = 1000; // –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –±—É—Ñ–µ—Ä–µ
    isShiftPressed = false;
    isCtrlPressed = false;
    isAltPressed = false;
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É—Ñ–µ—Ä–∞
    forbiddenWordsTimer = new QTimer(this);
    connect(forbiddenWordsTimer, &QTimer::timeout, this, &CameraWindow::checkTextBuffer);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±—É—Ñ–µ—Ä–∞ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
    textBufferTimer = new QTimer(this);
    connect(textBufferTimer, &QTimer::timeout, this, &CameraWindow::clearTextBuffer);
    
    qDebug() << "Forbidden words system initialized with" << forbiddenWords.size() << "words";
    Lab4Logger::instance()->logSystemEvent("Forbidden words system initialized");
}

void CameraWindow::startForbiddenWordsMonitoring()
{
    qDebug() << "Starting forbidden words monitoring";
    
    if (isMonitoringForbiddenWords) {
        qDebug() << "Forbidden words monitoring already active";
        return;
    }
    
    isMonitoringForbiddenWords = true;
    currentText = "";
    textBuffer = "";
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö—É–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    installKeyboardHook();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É—Ñ–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 200–º—Å
    forbiddenWordsTimer->start(200);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –±—É—Ñ–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    textBufferTimer->start(30000);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (monitoringStatusLabel) {
        monitoringStatusLabel->setText("üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –í–ö–õ–Æ–ß–ï–ù");
        monitoringStatusLabel->setStyleSheet(
            "QLabel { "
            "  background-color: #C8E6C9; "
            "  color: #2E7D32; "
            "  padding: 8px; "
            "  border-radius: 4px; "
            "  border: 2px solid #4CAF50; "
            "  font-weight: bold; "
            "  font-size: 12px; "
            "}"
        );
    }
    
    qDebug() << "Forbidden words monitoring started with keyboard hook";
    Lab4Logger::instance()->logSystemEvent("Forbidden words monitoring started with keyboard hook");
}

void CameraWindow::stopForbiddenWordsMonitoring()
{
    qDebug() << "Stopping forbidden words monitoring";
    
    if (!isMonitoringForbiddenWords) {
        qDebug() << "Forbidden words monitoring not active";
        return;
    }
    
    isMonitoringForbiddenWords = false;
    forbiddenWordsTimer->stop();
    textBufferTimer->stop();
    currentText = "";
    textBuffer = "";
    
    // –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö—É–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    removeKeyboardHook();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (monitoringStatusLabel) {
        monitoringStatusLabel->setText("üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –í–´–ö–õ–Æ–ß–ï–ù");
        monitoringStatusLabel->setStyleSheet(
            "QLabel { "
            "  background-color: #FFCDD2; "
            "  color: #D32F2F; "
            "  padding: 8px; "
            "  border-radius: 4px; "
            "  border: 2px solid #F44336; "
            "  font-weight: bold; "
            "  font-size: 12px; "
            "}"
        );
    }
    
    qDebug() << "Forbidden words monitoring stopped";
    Lab4Logger::instance()->logSystemEvent("Forbidden words monitoring stopped");
}

void CameraWindow::checkTextBuffer()
{
    if (!isMonitoringForbiddenWords) {
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É—Ñ–µ—Ä –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    if (!textBuffer.isEmpty()) {
        checkForbiddenWords(textBuffer);
    }
}

void CameraWindow::checkForbiddenWords(const QString &text)
{
    if (!isMonitoringForbiddenWords) {
        return;
    }
    
    QString lowerText = text.toLower();
    
    for (const QString &word : forbiddenWords) {
        if (lowerText.contains(word)) {
            qDebug() << "Forbidden word detected:" << word;
            onForbiddenWordDetected(word);
            return; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
        }
    }
}

void CameraWindow::onForbiddenWordDetected(const QString &word)
{
    qDebug() << "=== FORBIDDEN WORD DETECTED ===" << word;
    Lab4Logger::instance()->logSystemEvent(QString("Forbidden word detected: %1").arg(word));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç –î–∂–µ–π–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π 009.gif
    if (jakeWarning) {
        jakeWarning->showForbiddenWordWarning(word);
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º —Ñ–æ—Ç–æ (–¥–∞–∂–µ –µ—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ)
    qDebug() << "Taking emergency photo due to forbidden word:" << word;
    cameraWorker->takePhoto();
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    Lab4Logger::instance()->logCameraEvent(QString("Emergency photo taken due to forbidden word: %1").arg(word));
    
    // –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    textBuffer.clear();
    qDebug() << "Text buffer cleared after forbidden word detection";
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    QString forbiddenWordsList = forbiddenWords.join(", ");
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    QMessageBox::warning(this, "‚ö†Ô∏è –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!", 
        QString("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: '%1'\n\n"
                "üìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:\n%2\n\n"
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–¥–µ–ª–∞–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.").arg(word, forbiddenWordsList));
}

// –†–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
void CameraWindow::processKeyPress(int keyCode, bool isShift, bool isCtrl, bool isAlt)
{
    if (!isMonitoringForbiddenWords) {
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    isShiftPressed = isShift;
    isCtrlPressed = isCtrl;
    isAltPressed = isAlt;
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
    if (isCtrl || isAlt || keyCode == VK_TAB || keyCode == VK_ESCAPE || 
        keyCode == VK_F1 || keyCode == VK_F2 || keyCode == VK_F3 || keyCode == VK_F4 ||
        keyCode == VK_F5 || keyCode == VK_F6 || keyCode == VK_F7 || keyCode == VK_F8 ||
        keyCode == VK_F9 || keyCode == VK_F10 || keyCode == VK_F11 || keyCode == VK_F12) {
        return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
    if (keyCode >= 32 && keyCode <= 126) { // –ü–µ—á–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        QString character = QChar(keyCode);
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
        if (!isShift) {
            character = character.toLower();
        }
        
        addCharToBuffer(character);
    }
    else if (keyCode == VK_RETURN || keyCode == VK_SPACE) {
        // –ü—Ä–æ–±–µ–ª –∏–ª–∏ Enter - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª
        addCharToBuffer(" ");
    }
    else if (keyCode == VK_BACK) {
        // Backspace - —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
        if (!textBuffer.isEmpty()) {
            textBuffer.chop(1);
        }
    }
}

void CameraWindow::addCharToBuffer(const QString &character)
{
    if (!isMonitoringForbiddenWords) {
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ –±—É—Ñ–µ—Ä
    textBuffer += character;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
    if (textBuffer.length() > maxBufferSize) {
        textBuffer = textBuffer.right(maxBufferSize);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    qDebug() << "Added char to buffer:" << character << "Buffer size:" << textBuffer.length();
}

void CameraWindow::clearTextBuffer()
{
    if (!isMonitoringForbiddenWords) {
        return;
    }
    
    qDebug() << "Clearing text buffer, was" << textBuffer.length() << "characters";
    textBuffer.clear();
}

void CameraWindow::installKeyboardHook()
{
    qDebug() << "Installing global keyboard hook for forbidden words monitoring";
    
    if (keyboardHook != nullptr) {
        qDebug() << "Keyboard hook already installed";
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö—É–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboardHook = SetWindowsHookEx(WH_KEYBOARD_LL, keyboardHookProc, GetModuleHandle(nullptr), 0);
    
    if (keyboardHook != nullptr) {
        qDebug() << "‚úÖ Global keyboard hook installed successfully";
        Lab4Logger::instance()->logSystemEvent("Global keyboard hook installed for forbidden words monitoring");
    } else {
        qDebug() << "‚ùå Failed to install global keyboard hook";
        Lab4Logger::instance()->logSystemEvent("ERROR: Failed to install global keyboard hook");
    }
}

void CameraWindow::removeKeyboardHook()
{
    qDebug() << "Removing global keyboard hook for forbidden words monitoring";
    
    if (keyboardHook != nullptr) {
        if (UnhookWindowsHookEx(keyboardHook)) {
            qDebug() << "‚úÖ Global keyboard hook removed successfully";
            Lab4Logger::instance()->logSystemEvent("Global keyboard hook removed for forbidden words monitoring");
        } else {
            qDebug() << "‚ùå Failed to remove global keyboard hook";
            Lab4Logger::instance()->logSystemEvent("ERROR: Failed to remove global keyboard hook");
        }
        keyboardHook = nullptr;
    } else {
        qDebug() << "No keyboard hook to remove";
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ö—É–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
LRESULT CALLBACK CameraWindow::keyboardHookProc(int nCode, WPARAM wParam, LPARAM lParam)
{
    if (nCode >= 0 && instance && instance->isMonitoringForbiddenWords) {
        if (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN) {
            KBDLLHOOKSTRUCT* pKeyboard = (KBDLLHOOKSTRUCT*)lParam;
            int keyCode = pKeyboard->vkCode;
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
            bool isShift = (GetKeyState(VK_SHIFT) & 0x8000) != 0;
            bool isCtrl = (GetKeyState(VK_CONTROL) & 0x8000) != 0;
            bool isAlt = (GetKeyState(VK_MENU) & 0x8000) != 0;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏
            instance->processKeyPress(keyCode, isShift, isCtrl, isAlt);
        }
    }
    
    // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö—É–∫—É –≤ —Ü–µ–ø–æ—á–∫–µ
    return CallNextHookEx(keyboardHook, nCode, wParam, lParam);
}











